package com.zhizaolian.staff.action.finance;

import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.activiti.engine.IdentityService;
import org.activiti.engine.RepositoryService;
import org.activiti.engine.TaskService;
import org.activiti.engine.identity.Group;
import org.activiti.engine.identity.User;
import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Attachment;
import org.activiti.engine.task.Task;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.base.Function;
import com.zhizaolian.staff.action.BaseAction;
import com.zhizaolian.staff.enums.BusinessTypeEnum;
import com.zhizaolian.staff.enums.CompanyIDEnum;
import com.zhizaolian.staff.enums.TaskDefKeyEnum;
import com.zhizaolian.staff.enums.TaskResultEnum;
import com.zhizaolian.staff.service.PositionService;
import com.zhizaolian.staff.service.ProcessService;
import com.zhizaolian.staff.service.ReimbursementService;
import com.zhizaolian.staff.service.SocialSecurityService;
import com.zhizaolian.staff.service.StaffService;
import com.zhizaolian.staff.utils.ListResult;
import com.zhizaolian.staff.vo.AdvanceTaskVO;
import com.zhizaolian.staff.vo.AdvanceVo;
import com.zhizaolian.staff.vo.BankAccountVO;
import com.zhizaolian.staff.vo.CommentVO;
import com.zhizaolian.staff.vo.FormField;
import com.zhizaolian.staff.vo.HousingFundVO;
import com.zhizaolian.staff.vo.ReimbursementTaskVO;
import com.zhizaolian.staff.vo.ReimbursementVO;
import com.zhizaolian.staff.vo.SocialSecurityProcessVO;
import com.zhizaolian.staff.vo.SocialSecurityVO;
import com.zhizaolian.staff.vo.StaffVO;
import com.zhizaolian.staff.vo.TaskVO;

import lombok.Getter;
import lombok.Setter;

public class ProcessAction extends BaseAction {
	
	@Getter
	@Setter
	private String selectedPanel;
	@Setter
	@Getter
	private Integer page = 1;
	@Setter
	@Getter
	private Integer limit = 20;
	@Getter
	private Integer totalPage;
	@Getter
	private String errorMessage;
	@Setter
	private Integer result;  //任务处理结果
	@Setter
	@Getter
	private ReimbursementVO reimbursementVO;
	@Setter
	@Getter
	private AdvanceVo advanceVo;
	@Setter
	@Getter
	private String reimbursementNo;
	@Setter
	@Getter
	private String beginDate;
	@Setter
	@Getter
	private String endDate;
	
	@Autowired
	private IdentityService identityService;
	@Autowired
	private ProcessService processService;
	@Autowired
	private TaskService taskService;
	@Autowired
	private RepositoryService repositoryService;
	@Autowired
	private ReimbursementService reimbursementService;
	@Autowired
	private StaffService staffService;
	@Autowired
	private PositionService positionService;
	@Autowired
	private SocialSecurityService socialSecurityService;
	
	private static final long serialVersionUID = 1L;
	
	public String showReimbursementDiagram() {
		selectedPanel = "newReimbursement";
		return "reimbursementDiagram";
	}
	public String showAdvanceDiagram() {
		selectedPanel = "newAdvance";
		return "advanceDiagram";
	}
	public String newReimbursement() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}
		
		try {
			BankAccountVO bankAccountVO = reimbursementService.getBankAccountByUserID(user.getId());
			if (bankAccountVO != null) {
				reimbursementVO = new ReimbursementVO();
				reimbursementVO.setCardName(bankAccountVO.getCardName());
				reimbursementVO.setBank(bankAccountVO.getBank());
				reimbursementVO.setCardNumber(bankAccountVO.getCardNumber());
			}
		} catch (Exception e) {
			errorMessage = "获取打款账号失败："+e.getMessage();
			return "error";
		}
		
		StaffVO staff = staffService.getStaffByUserID(user.getId());
		request.setAttribute("userName", staff.getLastName());
		selectedPanel = "newReimbursement";
		return "newReimbursement";
	}
	
	public String reNewReimbursement() {
		String processInstanceID=request.getParameter("processInstanceID");
		request.setAttribute("processInstanceID", processInstanceID);
	    reimbursementVO = reimbursementService.getReimbursementVOByProcessInstanceID(processInstanceID);
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}
		
		try {
			BankAccountVO bankAccountVO = reimbursementService.getBankAccountByUserID(user.getId());
			if (bankAccountVO != null) {
//				reimbursementVO = new ReimbursementVO();
				reimbursementVO.setCardName(bankAccountVO.getCardName());
				reimbursementVO.setBank(bankAccountVO.getBank());
				reimbursementVO.setCardNumber(bankAccountVO.getCardNumber());
			}
		} catch (Exception e) {
			errorMessage = "获取打款账号失败："+e.getMessage();
			return "error";
		}
		
		List<Attachment> attas = taskService.getProcessInstanceAttachments(processInstanceID);
		
		if(CollectionUtils.isNotEmpty(attas)){
			Map<String,List<Attachment>> resultMap=new LinkedHashMap<>();
			for (Attachment attachment : attas) {
				
				String lastPre="0";
				try{
					lastPre=attachment.getDescription().substring(0,1);
				}catch(Exception e){};
				List<Attachment> list=resultMap.get(lastPre);
				if(list==null){
					list=new ArrayList<>();
				}
				list.add(attachment);
				resultMap.put(lastPre, list);
			}
			request.setAttribute("attaMap", resultMap);
		}
		
		StaffVO staff = staffService.getStaffByUserID(user.getId());
		request.setAttribute("userName", staff.getLastName());
		selectedPanel = "newReimbursement";
		return "reNewReimbursement";
	}
	
	
	public String newAdvance() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}
		
		try {
			BankAccountVO bankAccountVO = reimbursementService.getBankAccountByUserID(user.getId());
			if (bankAccountVO != null) {
				advanceVo = new AdvanceVo();
				advanceVo.setCardName(bankAccountVO.getCardName());
				advanceVo.setBank(bankAccountVO.getBank());
				advanceVo.setCardNumber(bankAccountVO.getCardNumber());
			}
		} catch (Exception e) {
			errorMessage = "获取打款账号失败："+e.getMessage();
			return "error";
		}
		
		StaffVO staff = staffService.getStaffByUserID(user.getId());
		request.setAttribute("userName", staff.getLastName());
		selectedPanel = "newAdvance";
		return "newAdvance";
	}
	@Getter
	@Setter
	private File[] file;
	@Getter
	@Setter
	private String fileDetail;
	public String startReimbursement() {
		try {
			reimbursementService.startReimbursement(reimbursementVO,file,fileDetail);
		} catch (Exception e) {
			e.printStackTrace(); 
			errorMessage = "报销申请提交失败：" + e.getMessage();
			return "error";
		}
		return "startReimbursement";
	}
	
	public String reStartReimbursement() {
		try {
			reimbursementService.reStartReimbursement(reimbursementVO,file,fileDetail,request.getParameter("processInstanceID"));
		} catch (Exception e) {
			e.printStackTrace();
			errorMessage = "报销申请提交失败：" + e.getMessage();
			return "error";
		}
		return "startReimbursement";
	}
	public String startAdvance(){
		try {
			reimbursementService.startAdvance(advanceVo,file,fileDetail);
		} catch (Exception e) {
			e.printStackTrace();
			errorMessage = "报销申请提交失败：" + e.getMessage();
			return "error";
		}
		return "startAdvance";
	}
	
	/**
	 * 查询我发起的报销申请列表
	 * @return
	 */
	public String myReimbursementList() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}
		
		try {
			int count = 0;
			ListResult<ReimbursementVO> rbListResult = reimbursementService.findReimbursementListByUserID(user.getId(), page, limit);
			request.setAttribute("reimbursementVOs", rbListResult.getList());
			count = rbListResult.getTotalCount();
			totalPage = count%limit==0 ? count/limit : count/limit+1;
		} catch (Exception e) {
			e.printStackTrace();
			errorMessage = "查询失败："+e.getMessage();
			return "error";
		}
		
		selectedPanel = "myReimbursementList";
		return "myReimbursementList";
	}
	
	
	public String myAdvanceList() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}
		
		try {
			int count = 0;
			ListResult<AdvanceVo> rbListResult = reimbursementService.findAdvanceListByUserID(user.getId(), page, limit);
			request.setAttribute("reimbursementVOs", rbListResult.getList());
			count = rbListResult.getTotalCount();
			totalPage = count%limit==0 ? count/limit : count/limit+1;
		} catch (Exception e) {
			e.printStackTrace();
			errorMessage = "查询失败："+e.getMessage();
			return "error";
		}
		
		selectedPanel = "myAdvanceList";
		return "myAdvanceList";
	}
	public String processHistory() {
		String processInstanceID = request.getParameter("processInstanceID");
		List<FormField> formFields = processService.getFormFieldsByProcessInstanceID(processInstanceID);
		List<CommentVO> comments = processService.getCommentsByProcessInstanceID(processInstanceID);
		List<TaskVO> finishedTaskVOs = processService.findFinishedTasksByProcessInstanceID(processInstanceID);
		request.setAttribute("formFields", formFields);
		request.setAttribute("comments", comments);
		request.setAttribute("finishedTaskVOs", finishedTaskVOs);
		if("1".equals(request.getParameter("type"))){
			selectedPanel = "myAdvanceList";
		}else{			
			selectedPanel = "myReimbursementList";
		}
		return "processHistory";
	}

	/**
	 * 查询待审批的报销申请列表
	 * @return
	 */
	public String findReimbursementList() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}
		
		List<Group> groups = identityService.createGroupQuery().groupMember(user.getId()).list();
		if (groups.size() <= 0) {
			selectedPanel = "reimbursementList";
			return "reimbursementList";
		}
		
		List<TaskDefKeyEnum> tasks = new ArrayList<TaskDefKeyEnum>();
		//等老数据 走完 应该删掉 第一个enum
		tasks.add(TaskDefKeyEnum.FINANCIAL_SECOND_AUDIT);
		tasks.add(TaskDefKeyEnum.REMIT_MONEY);
		tasks.add(TaskDefKeyEnum.FINANCIAL_FIRST_AUDIT);
		ListResult<ReimbursementTaskVO> taskListResult = reimbursementService.findReimbursementsByUserGroupIDs(tasks, groups, Arrays.asList(user.getId()), reimbursementNo, beginDate, endDate, page, limit);
		int count = taskListResult.getTotalCount();
		totalPage = count%limit==0 ? count/limit : count/limit+1;
		
		request.setAttribute("taskVOs", taskListResult.getList());
		selectedPanel = "reimbursementList";
		return "reimbursementList";
	}
	
	
	public String findReimbursementListAll(){
		ListResult<ReimbursementTaskVO> taskListResult =reimbursementService.findReimbursementsAll(reimbursementNo, beginDate, endDate, page, limit);
		int count = taskListResult.getTotalCount();
		totalPage = count%limit==0 ? count/limit : count/limit+1;
		request.setAttribute("taskVOs", taskListResult.getList());
		selectedPanel = "reimbursementList";
		return "findReimbursementListAll";
	}
	
	public String findAdvanceListAll(){
		ListResult<AdvanceTaskVO> taskListResult =reimbursementService.findAdvancessAll(reimbursementNo, beginDate, endDate, page, limit);
		int count = taskListResult.getTotalCount();
		totalPage = count%limit==0 ? count/limit : count/limit+1;
		request.setAttribute("taskVOs", taskListResult.getList());
		selectedPanel = "reimbursementList";
		return "findAdvanceListAll";
	}
	
	public String findAdvanceList() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}
		
		List<Group> groups = identityService.createGroupQuery().groupMember(user.getId()).list();
		if (groups.size() <= 0) {
			selectedPanel = "AdvanceList";
			return "AdvanceList";
		}
		
		List<TaskDefKeyEnum> tasks = new ArrayList<TaskDefKeyEnum>();
		//等老数据 走完 应该删掉 第一个enum
		tasks.add(TaskDefKeyEnum.FINANCIAL_SECOND_AUDIT);
		tasks.add(TaskDefKeyEnum.REMIT_MONEY);
		tasks.add(TaskDefKeyEnum.FINANCIAL_FIRST_AUDIT);
		ListResult<AdvanceTaskVO> taskListResult = reimbursementService.findAdvancessByUserGroupIDs(tasks, groups, Arrays.asList(user.getId()), reimbursementNo, beginDate, endDate, page, limit);
		int count = taskListResult.getTotalCount();
		totalPage = count%limit==0 ? count/limit : count/limit+1;
		
		request.setAttribute("taskVOs", taskListResult.getList());
		selectedPanel = "advanceList";
		return "advanceList";
	}
	
	/**
	 * 查询待处理的社保缴纳申请列表
	 * @return
	 */
	public String findSocialSecurityList() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}
		
		List<Group> groups = identityService.createGroupQuery().groupMember(user.getId()).list();
		if (groups.size() <= 0) {
			selectedPanel = "socialSecurityList";
			return "socialSecurityList";
		}
		
		List<TaskDefKeyEnum> tasks = new ArrayList<TaskDefKeyEnum>();
		tasks.add(TaskDefKeyEnum.SS_FINANCIAL_PROCESSING);
		ListResult<TaskVO> taskListResult = processService.findTasksByUserGroupIDs(tasks, groups, Arrays.asList(user.getId()), page, limit);
		int count = taskListResult.getTotalCount();
		totalPage = count%limit==0 ? count/limit : count/limit+1;
		
		request.setAttribute("taskVOs", taskListResult.getList());
		selectedPanel = "socialSecurityList";
		return "socialSecurityList";
	}
	private void getAndSetLeaderMsg(List<TaskVO> finishedVos,final List<CommentVO> comments){
		Function<String, String> getCommentBytaskId=new Function<String, String>() {
			@Override
			public String apply(String taskId) {
				if(org.apache.commons.collections4.CollectionUtils.isNotEmpty(comments)&&StringUtils.isNotBlank(taskId)){
					for (CommentVO commentVO : comments) {
						if(taskId.equals(commentVO.getTaskID())){
							return commentVO.getContent();
						}
					}
				}
				return "";
			}
		};
		String dept_leader_msg="";
		if(org.apache.commons.collections4.CollectionUtils.isNotEmpty(finishedVos)){
			for (TaskVO taskVO : finishedVos) {
				String taskName=taskVO.getTaskName();
				if("主管审批".equals(taskName)||"总经理审批".equals(taskName)||"分公司负责人".equals(taskName)||"分公司总经理审批".equals(taskName)){
					String resultMsg="【"+taskName+"】	"+taskVO.getAssigneeName()+":";
					resultMsg+=(taskVO.getResult()==null)?"":taskVO.getResult()+":";
					resultMsg+=getCommentBytaskId.apply(taskVO.getTaskID());
					dept_leader_msg+=resultMsg+"</br>";
				} 
				if("公司总经理审批".equals(taskName)||"总公司总经理".equals(taskName)){
					String resultMsg="【"+taskName+"】	"+taskVO.getAssigneeName()+":";
					resultMsg+=(taskVO.getResult()==null)?"":taskVO.getResult()+":";
					resultMsg+=getCommentBytaskId.apply(taskVO.getTaskID());
					request.setAttribute("company_leader_msg", resultMsg);
				}
			}
		}
		request.setAttribute("dept_leader_msg", dept_leader_msg);
	}
	
	public String auditReimbursement() {
		String taskID = request.getParameter("taskID");
		//是否查看全部页面
		request.setAttribute("isFromAll", request.getParameter("isFromAll"));
		if(StringUtils.isBlank(taskID)){
			return "auditReimbursement";
		}
		ReimbursementVO reimbursementVO = reimbursementService.getReimbursementVOByTaskID(taskID);
		List<CommentVO> comments = processService.getComments(taskID);
		Task task = taskService.createTaskQuery().taskId(taskID).singleResult();
		ProcessInstance processInstance = processService.getProcessInstance(taskID);
		ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery().processDefinitionId(processInstance.getProcessDefinitionId()).singleResult();
		List<TaskVO> finishedTaskVOs = processService.findFinishedTasksByProcessInstanceID(processInstance.getId());
		List<Attachment> attas = taskService.getProcessInstanceAttachments(processInstance.getId());
		List<Group> groups = identityService.createGroupQuery().groupMember(reimbursementVO.getRequestUserID()).list();
		if (groups.size() > 0) {
			String[] positionIDs = groups.get(0).getType().split("_");
			String companyName = CompanyIDEnum.valueOf(Integer.parseInt(positionIDs[0])).getName();
			String departmentName = positionService.getDepartmentByID(Integer.parseInt(positionIDs[1])).getDepartmentName();
			request.setAttribute("companyName", companyName);
			request.setAttribute("departmentName", departmentName);
		}
		//单子上的两个流程走到才能确定的姓名 记录在实体类上
		ReimbursementVO reimbursementVO2=reimbursementService.getReimbursementVOByProcessInstanceID(processInstance.getId());
		reimbursementVO.setShowPerson1(reimbursementVO2.getShowPerson1());
		if ("财务打款".equals(request.getParameter("taskName"))) {
			User user=(User) request.getSession().getAttribute("user");
			reimbursementVO.setShowPerson3(staffService.getRealNameByUserId(user.getId()));
		}
		request.setAttribute("attachmentSize", attas.size());
		request.setAttribute("attas", attas);
		request.setAttribute("taskDefKey", task.getTaskDefinitionKey());
		request.setAttribute("businessKey", processDefinition.getKey());
		request.setAttribute("reimbursementVO", reimbursementVO);
		request.setAttribute("comments", comments);
		request.setAttribute("finishedTaskVOs", finishedTaskVOs);
		request.setAttribute("taskID", taskID);
		request.setAttribute("finishedTaskVOs", finishedTaskVOs);
		getAndSetLeaderMsg(finishedTaskVOs, comments);
		return "auditReimbursement";
	}
	
	
	public String auditAdvance() {
		String taskID = request.getParameter("taskID");
		//是否查看全部页面
		request.setAttribute("isFromAll", request.getParameter("isFromAll"));
		if(StringUtils.isBlank(taskID)){
			return "auditAdvance";
		}
		AdvanceVo reimbursementVO = reimbursementService.getAdvanceVOByTaskID(taskID);
		List<CommentVO> comments = processService.getComments(taskID);
		Task task = taskService.createTaskQuery().taskId(taskID).singleResult();
		ProcessInstance processInstance = processService.getProcessInstance(taskID);
		List<TaskVO> finishedTaskVOs = processService.findFinishedTasksByProcessInstanceID(processInstance.getId());
		List<Attachment> attas = taskService.getProcessInstanceAttachments(processInstance.getId());
		List<Group> groups = identityService.createGroupQuery().groupMember(reimbursementVO.getRequestUserID()).list();
		if (groups.size() > 0) {
			String[] positionIDs = groups.get(0).getType().split("_");
			String companyName = CompanyIDEnum.valueOf(Integer.parseInt(positionIDs[0])).getName();
			String departmentName = positionService.getDepartmentByID(Integer.parseInt(positionIDs[1])).getDepartmentName();
			request.setAttribute("companyName", companyName);
			request.setAttribute("departmentName", departmentName);
		}
		//单子上的两个流程走到才能确定的姓名 记录在实体类上
		AdvanceVo reimbursementVO2=reimbursementService.geAdvanceTaskVOByProcessInstanceID(processInstance.getId());
		reimbursementVO.setShowPerson1(reimbursementVO2.getShowPerson1());
		if ("财务打款".equals(request.getParameter("taskName"))) {
			User user=(User) request.getSession().getAttribute("user");
			reimbursementVO.setShowPerson3(staffService.getRealNameByUserId(user.getId()));
		}		request.setAttribute("attas", attas);
		request.setAttribute("attachmentSize", attas.size());
		request.setAttribute("taskDefKey", task.getTaskDefinitionKey());
		request.setAttribute("reimbursementVO", reimbursementVO);
		request.setAttribute("comments", comments);
		request.setAttribute("finishedTaskVOs", finishedTaskVOs);
		request.setAttribute("taskID", taskID);
		getAndSetLeaderMsg(finishedTaskVOs,comments);
		selectedPanel = "advanceList";
		return "auditAdvance";
	}
	public String taskComplete() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}
		
		String taskID = request.getParameter("taskID");
		String comment = request.getParameter("comment");
		String businessType = request.getParameter("businessType");
		try {
			ProcessInstance pInstance = processService.getProcessInstance(taskID);
			//完成任务
			processService.completeTask(taskID, user.getId(), TaskResultEnum.valueOf(result), comment);
			//更新业务表的流程节点状态processStatus
			processService.updateProcessStatus(pInstance.getId(), TaskResultEnum.valueOf(result), businessType);
		} catch (Exception e) {
			errorMessage = "处理失败："+e.getMessage();
			return "error";
		}
	
		if (BusinessTypeEnum.SOCIAL_SECURITY.getName().equals(businessType)) {
			return "socialSecurityComplete"; 
		}
		return "reimbursementComplete";
	}
	
	public String reComplete() {

			User user = (User) request.getSession().getAttribute("user");
			if (user == null) {
				errorMessage = "您尚未登录，请先登录！";
				return "error";
			}
			String taskID = request.getParameter("taskID");
			String comment = request.getParameter("comment");
			String businessType = request.getParameter("businessType");
			String selectedPanel=request.getParameter("selectedPanel");
			String type_=request.getParameter("type_");
			try {
				ProcessInstance pInstance = processService.getProcessInstance(taskID);
				//完成任务
				processService.completeTask(taskID, user.getId(), TaskResultEnum.valueOf(result), comment);
				//更新业务表的流程节点状态processStatus
				processService.updateProcessStatus(pInstance.getId(), TaskResultEnum.valueOf(result), businessType);
				//根据选中页判断 是 预约还是报销
				if("advanceList".equals(selectedPanel)){
					reimbursementService.setAdvanceFinancialFirstAuditName(pInstance.getId(),staffService.getRealNameByUserId(user.getId()),StringUtils.isNotEmpty(type_)?2:1);					
				}else{
					reimbursementService.setfinancialFirstAuditName(pInstance.getId(),staffService.getRealNameByUserId(user.getId()),StringUtils.isNotEmpty(type_)?2:1);					
				}
			} catch (Exception e) {
				errorMessage = "处理失败："+e.getMessage();
				return "error";
			}
			return "reimbursementComplete";
	}
	public String auditSocialSecurity() {
		String taskID = request.getParameter("taskID");
		try {
			String processInstanceID = processService.getProcessInstance(taskID).getId();
			SocialSecurityProcessVO socialSecurityProcessVO = socialSecurityService.getSocialSecurityProcessByProcessInstanceID(processInstanceID);
			List<SocialSecurityVO> socialSecurityVOs = socialSecurityService.findSocialSecurityListByProcessID(socialSecurityProcessVO.getSspID());
			for (SocialSecurityVO socialSecurityVO : socialSecurityVOs) {
				socialSecurityVO.setUserName(staffService.getStaffByUserID(socialSecurityVO.getUserID()).getLastName());
			}
			request.setAttribute("socialSecurityVOs", socialSecurityVOs);
			List<HousingFundVO> housingFundVOs = socialSecurityService.findHousingFundListByProcessID(socialSecurityProcessVO.getSspID());
			for (HousingFundVO housingFundVO : housingFundVOs) {
				housingFundVO.setUserName(staffService.getStaffByUserID(housingFundVO.getUserID()).getLastName());
			}
			request.setAttribute("housingFundVOs", housingFundVOs);
			
			List<CommentVO> comments = processService.getCommentsByProcessInstanceID(processInstanceID);
			List<TaskVO> finishedTaskVOs = processService.findFinishedTasksByProcessInstanceID(processInstanceID);
			
			request.setAttribute("socialSecurityProcessVO", socialSecurityProcessVO);
			request.setAttribute("comments", comments);
			request.setAttribute("finishedTaskVOs", finishedTaskVOs);
		} catch (Exception e) {
			errorMessage = "获取审批信息失败："+e.getMessage();
			return "error";
		}
		
		request.setAttribute("taskID", taskID);
		selectedPanel = "socialSecurityList";
		return "auditSocialSecurity";
	}
	
}
