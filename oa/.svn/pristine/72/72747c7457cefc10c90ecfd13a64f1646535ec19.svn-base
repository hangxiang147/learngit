package com.zhizaolian.staff.service.impl;


import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.activiti.engine.HistoryService;
import org.activiti.engine.IdentityService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.history.HistoricDetail;
import org.activiti.engine.history.HistoricVariableUpdate;
import org.activiti.engine.identity.Group;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Attachment;
import org.activiti.engine.task.IdentityLink;
import org.activiti.engine.task.Task;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;

import com.zhizaolian.staff.dao.BankAccountDao;
import com.zhizaolian.staff.dao.BaseDao;
import com.zhizaolian.staff.dao.ReimbursementDao;
import com.zhizaolian.staff.dao.ReimbursementDetailDao;
import com.zhizaolian.staff.entity.AdvanceEntity;
import com.zhizaolian.staff.entity.BankAccountEntity;
import com.zhizaolian.staff.entity.ReimbursementDetailEntity;
import com.zhizaolian.staff.entity.ReimbursementEntity;
import com.zhizaolian.staff.enums.BusinessTypeEnum;
import com.zhizaolian.staff.enums.CompanyIDEnum;
import com.zhizaolian.staff.enums.Constants;
import com.zhizaolian.staff.enums.IsDeletedEnum;
import com.zhizaolian.staff.enums.TaskDefKeyEnum;
import com.zhizaolian.staff.enums.TaskResultEnum;
import com.zhizaolian.staff.service.PermissionService;
import com.zhizaolian.staff.service.ProcessService;
import com.zhizaolian.staff.service.ReimbursementService;
import com.zhizaolian.staff.service.StaffService;
import com.zhizaolian.staff.transformer.AdvanceVOTransformer;
import com.zhizaolian.staff.transformer.BankAccountVOTransformer;
import com.zhizaolian.staff.transformer.ReimbursementVOTransformer;
import com.zhizaolian.staff.utils.DateUtil;
import com.zhizaolian.staff.utils.ListResult;
import com.zhizaolian.staff.utils.Lists2;
import com.zhizaolian.staff.utils.SafeFunction;
import com.zhizaolian.staff.vo.AdvanceTaskVO;
import com.zhizaolian.staff.vo.AdvanceVo;
import com.zhizaolian.staff.vo.BankAccountVO;
import com.zhizaolian.staff.vo.BaseVO;
import com.zhizaolian.staff.vo.ReimbursementTaskVO;
import com.zhizaolian.staff.vo.ReimbursementVO;
import com.zhizaolian.staff.vo.StaffVO;

import net.sf.json.JSONArray;

public class ReimbursementServiceImpl implements ReimbursementService {

	@Autowired
	private ReimbursementDao reimbursementDao;
	@Autowired
	private ReimbursementDetailDao reimbursementDetailDao;
	@Autowired
	private BankAccountDao bankAccountDao;
	@Autowired
	private BaseDao baseDao;
	@Autowired
	private StaffService staffService;
	@Autowired
	private PermissionService permissionService;
	@Autowired
	private RuntimeService runtimeService;
	@Autowired
	private TaskService taskService;
	@Autowired
	private HistoryService historyService;
	@Autowired
	private ProcessService processService;
	@Autowired
	private IdentityService identityService;
	@Override
	public void startReimbursement(ReimbursementVO reimbursementVO, File[] file,
			String fileDetail) throws FileNotFoundException {
		reimbursementVO
				.setBusinessType(BusinessTypeEnum.REIMBURSEMENT.getName());
		reimbursementVO.setTitle(reimbursementVO.getRequestUserName() + "的"
				+ BusinessTypeEnum.REIMBURSEMENT.getName());
		String[] invoiceTitleList = reimbursementVO.getInvoiceTitle()
				.split("_");
		reimbursementVO.setInvoiceTitleID(Integer.valueOf(invoiceTitleList[0]));
		reimbursementVO.setInvoiceTitle(invoiceTitleList[1]);
		Date now = new Date();
		reimbursementVO.setReimbursementNo("A" + now.getTime());
		// 初始化流程参数
		Map<String, Object> vars = new HashMap<String, Object>();
		vars.put("arg", reimbursementVO);
		String supervisor = staffService
				.querySupervisor(reimbursementVO.getRequestUserID());
		String manager = staffService
				.queryManager(reimbursementVO.getRequestUserID());

		List<Group> groups = identityService.createGroupQuery()
				.groupMember(reimbursementVO.getRequestUserID()).list();
		int companyID = Integer.parseInt(groups.get(0).getType().split("_")[0]);
		String firstFinanceCode = Constants.FINANCIAL_FIRST_AUDIT;
		List<String> firstFinance = permissionService
				.findUsersByPermissionCode(firstFinanceCode);
		List<String> companyBoss = permissionService
				.findUsersByPermissionCode(Constants.COMPANY_BOSS);
		List<String> finaceManager = permissionService
				.findUsersByPermissionCode(Constants.FINANCIAL_MANAGER);
		// 由于 这两个 步骤 反过一次 变量命名 有点问题
		String financial_second_audit = Constants.FINANCIAL_SECOND_AUDIT;
		if (CompanyIDEnum.GUANGZHOU.getValue() == companyID) {
			financial_second_audit = Constants.FINANCIAL_FIRST_AUDIT_GZ;
		} else if (CompanyIDEnum.QIAN.getValue() == companyID) {
			financial_second_audit = Constants.FINANCIAL_FIRST_AUDIT_QA;
		}
		List<String> financialSecondAuditUsers = permissionService
				.findUsersByPermissionCode(financial_second_audit);
		List<String> financialSecondAuditGroups = permissionService
				.findGroupsByPermissionCode(Constants.FINANCIAL_SECOND_AUDIT);
		List<String> remitMoneyUsers = permissionService
				.findUsersByPermissionCode(Constants.REMIT_MONEY);
		List<String> remitMoneyGroups = permissionService
				.findGroupsByPermissionCode(Constants.REMIT_MONEY);
		if (StringUtils.isBlank(manager)) {
			throw new RuntimeException("未找到该申请的审批人！");
		}

		if (CollectionUtils.isEmpty(firstFinance)
				|| (!staffService.hasGroupMember(financialSecondAuditGroups)
						&& CollectionUtils.isEmpty(financialSecondAuditUsers))
				|| (!staffService.hasGroupMember(remitMoneyGroups)
						&& CollectionUtils.isEmpty(remitMoneyUsers))) {
			throw new RuntimeException("未找到该申请的审批人！");
		}

		vars.put("supervisor", supervisor);
		vars.put("manager", manager);
		vars.put("financial_manage", finaceManager.get(0));
		if(StringUtils.isEmpty(reimbursementVO.getMoneyType())){
			reimbursementVO.setMoneyType("人民币:1");
		}
		String moneyRate=reimbursementVO.getMoneyType().split(":")[1];
		Double moneyRateDouble=new Double(moneyRate);
		if (reimbursementVO.getTotalAmount()*moneyRateDouble > 1000) {
			vars.put("firstFinance", companyBoss.get(0));
		} else {
			vars.put("firstFinance", firstFinance.get(0));
		}
		reimbursementVO.setShowPerson2(
				staffService.getRealNameByUserId(finaceManager.get(0)));
		vars.put("financialSecondAuditUsers", financialSecondAuditUsers);
		vars.put("financialSecondAuditGroups", financialSecondAuditGroups);
		vars.put("remitMoneyUsers", remitMoneyUsers);
		vars.put("remitMoneyGroups", remitMoneyGroups);

		ProcessInstance processInstance = runtimeService
				.startProcessInstanceByKey(Constants.REIMBURSEMENT);
		// 查询第一个任务
		Task task = taskService.createTaskQuery()
				.processInstanceId(processInstance.getId()).singleResult();
		// 设置任务受理人
		taskService.setAssignee(task.getId(), reimbursementVO.getUserID());
		int index = -1;
		if (file != null && file.length > 0) {
			@SuppressWarnings("unchecked")
			List<Object> fileDetailList = JSONArray.fromObject(fileDetail);
			int i = 0;
			for (Object o : fileDetailList) {
				index++;
				InputStream is = new FileInputStream(file[i]);
				JSONArray jArray = (JSONArray) o;
				String fileName = (String) jArray.get(0);
				if (StringUtils.isBlank(fileName))
					continue;
				String suffix = (String) jArray.get(1);
				if ("jpg".equals(suffix) || "jpeg".equals(suffix)
						|| "png".equals(suffix)) {
					taskService.createAttachment("picture", task.getId(),
							processInstance.getId(), fileName,
							jArray.get(2) + "_" + index, is);
				} else {
					taskService.createAttachment(suffix, task.getId(),
							processInstance.getId(), fileName,
							jArray.get(2) + "_" + index, is);
				}
				i++;
			}
		}
		reimbursementVO.setTotalAmount((Double.valueOf(new DecimalFormat("0.00")
				.format(reimbursementVO.getTotalAmount()))));
		// 完成任务
		taskService.complete(task.getId(), vars);
		// 记录转正数据
		saveReimbursement(reimbursementVO, processInstance.getId());
	}

	@Override
	public void reStartReimbursement(ReimbursementVO reimbursementVO,
			File[] file, String fileDetail, String instanceId)
			throws IOException {
		reimbursementVO
				.setBusinessType(BusinessTypeEnum.REIMBURSEMENT.getName());
		reimbursementVO.setTitle(reimbursementVO.getRequestUserName() + "的"
				+ BusinessTypeEnum.REIMBURSEMENT.getName());
		String[] invoiceTitleList = reimbursementVO.getInvoiceTitle()
				.split("_");
		reimbursementVO.setInvoiceTitleID(Integer.valueOf(invoiceTitleList[0]));
		reimbursementVO.setInvoiceTitle(invoiceTitleList[1]);
		Date now = new Date();
		reimbursementVO.setReimbursementNo("A" + now.getTime());
		// 初始化流程参数
		Map<String, Object> vars = new HashMap<String, Object>();
		vars.put("arg", reimbursementVO);
		String supervisor = staffService
				.querySupervisor(reimbursementVO.getRequestUserID());
		String manager = staffService
				.queryManager(reimbursementVO.getRequestUserID());

		List<Group> groups = identityService.createGroupQuery()
				.groupMember(reimbursementVO.getRequestUserID()).list();
		int companyID = Integer.parseInt(groups.get(0).getType().split("_")[0]);
		String firstFinanceCode = Constants.FINANCIAL_FIRST_AUDIT;
		List<String> firstFinance = permissionService
				.findUsersByPermissionCode(firstFinanceCode);
		List<String> companyBoss = permissionService
				.findUsersByPermissionCode(Constants.COMPANY_BOSS);
		List<String> finaceManager = permissionService
				.findUsersByPermissionCode(Constants.FINANCIAL_MANAGER);
		// 由于 这两个 步骤 反过一次 变量命名 有点问题
		String financial_second_audit = Constants.FINANCIAL_SECOND_AUDIT;
		if (CompanyIDEnum.GUANGZHOU.getValue() == companyID) {
			financial_second_audit = Constants.FINANCIAL_FIRST_AUDIT_GZ;
		} else if (CompanyIDEnum.QIAN.getValue() == companyID) {
			financial_second_audit = Constants.FINANCIAL_FIRST_AUDIT_QA;
		}
		List<String> financialSecondAuditUsers = permissionService
				.findUsersByPermissionCode(financial_second_audit);
		List<String> financialSecondAuditGroups = permissionService
				.findGroupsByPermissionCode(Constants.FINANCIAL_SECOND_AUDIT);
		List<String> remitMoneyUsers = permissionService
				.findUsersByPermissionCode(Constants.REMIT_MONEY);
		List<String> remitMoneyGroups = permissionService
				.findGroupsByPermissionCode(Constants.REMIT_MONEY);
		if (StringUtils.isBlank(manager)) {
			throw new RuntimeException("未找到该申请的审批人！");
		}

		if (CollectionUtils.isEmpty(firstFinance)
				|| (!staffService.hasGroupMember(financialSecondAuditGroups)
						&& CollectionUtils.isEmpty(financialSecondAuditUsers))
				|| (!staffService.hasGroupMember(remitMoneyGroups)
						&& CollectionUtils.isEmpty(remitMoneyUsers))) {
			throw new RuntimeException("未找到该申请的审批人！");
		}

		vars.put("supervisor", supervisor);
		vars.put("manager", manager);
		vars.put("financial_manage", finaceManager.get(0));
		if (reimbursementVO.getTotalAmount() > 1000) {
			vars.put("firstFinance", companyBoss.get(0));
		} else {
			vars.put("firstFinance", firstFinance.get(0));
		}
		reimbursementVO.setShowPerson2(
				staffService.getRealNameByUserId(finaceManager.get(0)));
		vars.put("financialSecondAuditUsers", financialSecondAuditUsers);
		vars.put("financialSecondAuditGroups", financialSecondAuditGroups);
		vars.put("remitMoneyUsers", remitMoneyUsers);
		vars.put("remitMoneyGroups", remitMoneyGroups);

		ProcessInstance processInstance = runtimeService
				.startProcessInstanceByKey(Constants.REIMBURSEMENT);
		// 查询第一个任务
		Task task = taskService.createTaskQuery()
				.processInstanceId(processInstance.getId()).singleResult();
		// 设置任务受理人
		taskService.setAssignee(task.getId(), reimbursementVO.getUserID());
		int index = -1;
		Set<Integer> haveInsertAtta=new HashSet<>();
		if (file != null && file.length > 0) {
			@SuppressWarnings("unchecked")
			List<Object> fileDetailList = JSONArray.fromObject(fileDetail);
			int i = 0;
			for (Object o : fileDetailList) {
				index++;
				InputStream is = new FileInputStream(file[i]);
				JSONArray jArray = (JSONArray) o;
				try{
					haveInsertAtta.add(Integer.parseInt(jArray.get(2)+""));
				}catch(Exception e){
				}
				String fileName = (String) jArray.get(0);
				if (StringUtils.isBlank(fileName))
					continue;
				String suffix = (String) jArray.get(1);
				if ("jpg".equals(suffix) || "jpeg".equals(suffix)
						|| "png".equals(suffix)) {
					taskService.createAttachment("picture", task.getId(),
							processInstance.getId(), fileName,
							jArray.get(2) + "_" + index, is);
				} else {
					taskService.createAttachment(suffix, task.getId(),
							processInstance.getId(), fileName,
							jArray.get(2) + "_" + index, is);
				}
				i++;
			}
		}
		
		for(int i=0;i<reimbursementVO.getAmount().length;i++){
			if(!haveInsertAtta.contains(i)){
				List<Attachment> attas = taskService.getProcessInstanceAttachments(instanceId);
				for (Attachment attachment : attas) {
					if(attachment.getDescription().startsWith(i+""))
						taskService.createAttachment(attachment.getType(), task.getId(), processInstance.getId(), attachment.getName(), attachment.getDescription(),taskService.getAttachmentContent(attachment.getId()));
				}
			}
		}
			
		
		reimbursementVO.setTotalAmount((Double.valueOf(new DecimalFormat("0.00")
				.format(reimbursementVO.getTotalAmount()))));
		// 完成任务
		taskService.complete(task.getId(), vars);
		// 记录转正数据
		saveReimbursement(reimbursementVO, processInstance.getId());

	}

	@Override
	public void startAdvance(AdvanceVo advanceVo, File[] file,
			String fileDetail) throws IOException {
		advanceVo.setBusinessType(BusinessTypeEnum.ADVANCE.getName());
		advanceVo.setTitle(advanceVo.getRequestUserName() + "的"
				+ BusinessTypeEnum.ADVANCE.getName());
		if(1==advanceVo.getIsHaveInvoice()){
			String[] invoiceTitleList = advanceVo.getInvoiceTitle().split("_");
			advanceVo.setInvoiceTitleID(Integer.valueOf(invoiceTitleList[0]));
			advanceVo.setInvoiceTitle(invoiceTitleList[1]);
		}
		Date now = new Date();
		advanceVo.setReimbursementNo("A" + now.getTime());
		// 初始化流程参数
		Map<String, Object> vars = new HashMap<String, Object>();
		vars.put("arg", advanceVo);
		String supervisor = staffService
				.querySupervisor(advanceVo.getRequestUserID());
		String manager = staffService
				.queryManager(advanceVo.getRequestUserID());

		List<Group> groups = identityService.createGroupQuery()
				.groupMember(advanceVo.getRequestUserID()).list();
		int companyID = Integer.parseInt(groups.get(0).getType().split("_")[0]);
		String firstFinanceCode = Constants.FINANCIAL_FIRST_AUDIT;
		List<String> firstFinance = permissionService
				.findUsersByPermissionCode(firstFinanceCode);
		List<String> companyBoss = permissionService
				.findUsersByPermissionCode(Constants.COMPANY_BOSS);
		List<String> finaceManager = permissionService
				.findUsersByPermissionCode(Constants.FINANCIAL_MANAGER);
		// 由于 这两个 步骤 反过一次 变量命名 有点问题
		String financial_second_audit = Constants.FINANCIAL_SECOND_AUDIT;
		if (CompanyIDEnum.GUANGZHOU.getValue() == companyID) {
			financial_second_audit = Constants.FINANCIAL_FIRST_AUDIT_GZ;
		} else if (CompanyIDEnum.QIAN.getValue() == companyID) {
			financial_second_audit = Constants.FINANCIAL_FIRST_AUDIT_QA;
		}
		List<String> financialSecondAuditUsers = permissionService
				.findUsersByPermissionCode(financial_second_audit);
		List<String> financialSecondAuditGroups = permissionService
				.findGroupsByPermissionCode(Constants.FINANCIAL_SECOND_AUDIT);
		List<String> remitMoneyUsers = permissionService
				.findUsersByPermissionCode(Constants.REMIT_MONEY);
		List<String> remitMoneyGroups = permissionService
				.findGroupsByPermissionCode(Constants.REMIT_MONEY);
		if (StringUtils.isBlank(manager)) {
			throw new RuntimeException("未找到该申请的审批人！");
		}

		if (CollectionUtils.isEmpty(firstFinance)
				|| (!staffService.hasGroupMember(financialSecondAuditGroups)
						&& CollectionUtils.isEmpty(financialSecondAuditUsers))
				|| (!staffService.hasGroupMember(remitMoneyGroups)
						&& CollectionUtils.isEmpty(remitMoneyUsers))) {
			throw new RuntimeException("未找到该申请的审批人！");
		}

		vars.put("supervisor", supervisor);
		vars.put("manager", manager);
		vars.put("financial_manage", finaceManager.get(0));
		String moneyRate=advanceVo.getMoneyType().split(":")[1];
		Double moneyRateDouble=new Double(moneyRate);
		if (advanceVo.getTotalAmount()*moneyRateDouble > 1000) {
			vars.put("firstFinance", companyBoss.get(0));
		} else {
			vars.put("firstFinance", firstFinance.get(0));
		}
		advanceVo.setShowPerson2(
				staffService.getRealNameByUserId(finaceManager.get(0)));
		vars.put("financialSecondAuditUsers", financialSecondAuditUsers);
		vars.put("financialSecondAuditGroups", financialSecondAuditGroups);
		vars.put("remitMoneyUsers", remitMoneyUsers);
		vars.put("remitMoneyGroups", remitMoneyGroups);

		ProcessInstance processInstance = runtimeService
				.startProcessInstanceByKey(Constants.ADVANCE);
		// 查询第一个任务
		Task task = taskService.createTaskQuery()
				.processInstanceId(processInstance.getId()).singleResult();
		// 设置任务受理人
		taskService.setAssignee(task.getId(), advanceVo.getUserID());
		int index = -1;
		if (file != null && file.length > 0) {
			@SuppressWarnings("unchecked")
			List<Object> fileDetailList = JSONArray.fromObject(fileDetail);
			int i = 0;
			for (Object o : fileDetailList) {
				index++;
				InputStream is = new FileInputStream(file[i]);
				JSONArray jArray = (JSONArray) o;
				String fileName = (String) jArray.get(0);
				if (StringUtils.isBlank(fileName))
					continue;
				String suffix = (String) jArray.get(1);
				if ("jpg".equals(suffix) || "jpeg".equals(suffix)
						|| "png".equals(suffix)) {
					taskService.createAttachment("picture", task.getId(),
							processInstance.getId(), fileName,
							jArray.get(2) + "_" + index, is);
				} else {
					taskService.createAttachment(suffix, task.getId(),
							processInstance.getId(), fileName,
							jArray.get(2) + "_" + index, is);
				}
				i++;
			}
		}
		
		advanceVo.setTotalAmount((Double.valueOf(
				new DecimalFormat("0.00").format(advanceVo.getTotalAmount()))));
		// 完成任务
		taskService.complete(task.getId(), vars);
		// 记录转正数据
		saveAdvance(advanceVo, processInstance.getId());
	}

	@Override
	public ListResult<ReimbursementVO> findReimbursementListByUserID(
			String userID, int page, int limit) {
		// 查询OA_Reimbursement表的数据
		List<ReimbursementEntity> reimbursementEntities = reimbursementDao
				.findReimbursementsByUserID(userID, page, limit);
		List<ReimbursementVO> reimbursementVOs = new ArrayList<ReimbursementVO>();
		for (ReimbursementEntity reimbursement : reimbursementEntities) {
			ReimbursementVO reimbursementVO = new ReimbursementVO();
			reimbursementVO.setReStart(reimbursement.getReStart());
			reimbursementVO
					.setProcessInstanceID(reimbursement.getProcessInstanceID());
			reimbursementVO
					.setReimbursementNo(reimbursement.getReimbursementNo());
			reimbursementVO.setTotalAmount(reimbursement.getTotalAmount());

			List<HistoricDetail> datas = historyService
					.createHistoricDetailQuery()
					.processInstanceId(reimbursement.getProcessInstanceID())
					.list();
			for (HistoricDetail historicDetail : datas) {
				HistoricVariableUpdate variable = (HistoricVariableUpdate) historicDetail;
				if (variable.getVariableName().equals("arg")) {
					ReimbursementVO arg = (ReimbursementVO) variable.getValue();
					reimbursementVO.setRequestDate(arg.getRequestDate());
					reimbursementVO.setTitle(arg.getTitle());
					reimbursementVO.setPayeeName(arg.getPayeeName());
					reimbursementVO
							.setRequestUserName(arg.getRequestUserName());
					reimbursementVO.setInvoiceTitle(arg.getInvoiceTitle());
					reimbursementVO.setInvoiceNum(arg.getInvoiceNum());
					reimbursementVO.setDetailNum(arg.getDetailNum());
					reimbursementVO.setCardName(arg.getCardName());
					reimbursementVO.setBank(arg.getBank());
					reimbursementVO.setCardNumber(arg.getCardNumber());
					reimbursementVO.setUsage(arg.getUsage());
					reimbursementVO.setReternenceName(arg.getReternenceName());
					reimbursementVO
							.setReternenceMobile(arg.getReternenceMobile());
					reimbursementVO.setIsFixedAsset(arg.getIsFixedAsset());
					reimbursementVO.setFixedAssetNo(arg.getFixedAssetNo());
					reimbursementVO.setAmount(arg.getAmount());
				}
			}

			// 查询流程实例
			ProcessInstance pInstance = runtimeService
					.createProcessInstanceQuery()
					.processInstanceId(reimbursement.getProcessInstanceID())
					.singleResult();
			if (pInstance != null) {
				reimbursementVO.setStatus("处理中");
				runtimeService.createProcessInstanceQuery().list();
				try{
					Task task=taskService.createTaskQuery().processInstanceId(pInstance.getId()).singleResult();
					if(task.getAssignee()==null){
						List<IdentityLink> idList =taskService.getIdentityLinksForTask(task.getId());
						String prevStr=processService
						.getProcessTaskAssignee(pInstance.getId());
						String[] nameArr=new String[idList.size()];
						int i=0;
						for (IdentityLink identityLink : idList) {
							nameArr[i++]=staffService.getRealNameByUserId(identityLink.getUserId());
						}
						reimbursementVO.setAssigneeUserName("【"+prevStr+"】"+StringUtils.join(nameArr,","));
					}else{
						reimbursementVO.setAssigneeUserName(processService
								.getProcessTaskAssignee(pInstance.getId()));
					}
				}catch(Exception e){
					reimbursementVO.setAssigneeUserName(processService
							.getProcessTaskAssignee(pInstance.getId()));
				}
			
				
			} else {
				reimbursementVO.setStatus(TaskResultEnum
						.valueOf(reimbursement.getProcessStatus()).getName());
			}
			reimbursementVOs.add(reimbursementVO);
		}

		int count = reimbursementDao.countReimbursementsByUserID(userID);
		return new ListResult<ReimbursementVO>(reimbursementVOs, count);
	}

	@Override
	public ListResult<AdvanceVo> findAdvanceListByUserID(String userID,
			int page, int limit) {
		List<AdvanceEntity> reimbursementEntities = reimbursementDao
				.findAdvancesByUserID(userID, page, limit);
		List<AdvanceVo> advanceVos = new ArrayList<AdvanceVo>();
		for (AdvanceEntity reimbursement : reimbursementEntities) {
			AdvanceVo advanceVo = new AdvanceVo();
			advanceVo
					.setProcessInstanceID(reimbursement.getProcessInstanceID());
			advanceVo.setReimbursementNo(reimbursement.getReimbursementNo());
			advanceVo.setTotalAmount(reimbursement.getTotalAmount());

			List<HistoricDetail> datas = historyService
					.createHistoricDetailQuery()
					.processInstanceId(reimbursement.getProcessInstanceID())
					.list();
			for (HistoricDetail historicDetail : datas) {
				HistoricVariableUpdate variable = (HistoricVariableUpdate) historicDetail;
				if (variable.getVariableName().equals("arg")) {
					AdvanceVo arg = (AdvanceVo) variable.getValue();
					advanceVo.setRequestDate(arg.getRequestDate());
					advanceVo.setTitle(arg.getTitle());
					advanceVo.setPayeeName(arg.getPayeeName());
					advanceVo.setRequestUserName(arg.getRequestUserName());
					advanceVo.setIsHaveInvoice(arg.getIsHaveInvoice());
					advanceVo.setInvoiceTitle(arg.getInvoiceTitle());
					advanceVo.setInvoiceNum(arg.getInvoiceNum());
					advanceVo.setDetailNum(arg.getDetailNum());
					advanceVo.setCardName(arg.getCardName());
					advanceVo.setBank(arg.getBank());
					advanceVo.setCardNumber(arg.getCardNumber());
					advanceVo.setUsage(arg.getUsage());
					advanceVo.setReternenceName(arg.getReternenceName());
					advanceVo.setReternenceMobile(arg.getReternenceMobile());
					advanceVo.setIsFixedAsset(arg.getIsFixedAsset());
					advanceVo.setFixedAssetNo(arg.getFixedAssetNo());
					advanceVo.setAmount(arg.getAmount());
				}
			}

			// 查询流程实例
			ProcessInstance pInstance = runtimeService
					.createProcessInstanceQuery()
					.processInstanceId(reimbursement.getProcessInstanceID())
					.singleResult();
			if (pInstance != null) {
				advanceVo.setStatus("处理中");
				runtimeService.createProcessInstanceQuery().list();
				
				try{
					Task task=taskService.createTaskQuery().processInstanceId(pInstance.getId()).singleResult();
					if(task.getAssignee()==null){
						List<IdentityLink> idList =taskService.getIdentityLinksForTask(task.getId());
						String prevStr=processService
						.getProcessTaskAssignee(pInstance.getId());
						String[] nameArr=new String[idList.size()];
						int i=0;
						for (IdentityLink identityLink : idList) {
							nameArr[i++]=staffService.getRealNameByUserId(identityLink.getUserId());
						}
						advanceVo.setAssigneeUserName("【"+prevStr+"】"+StringUtils.join(nameArr,","));
					}else{
						advanceVo.setAssigneeUserName(processService
								.getProcessTaskAssignee(pInstance.getId()));
					}
				}catch(Exception e){
					advanceVo.setAssigneeUserName(processService
							.getProcessTaskAssignee(pInstance.getId()));
				}
			
				
			} else {
				advanceVo.setStatus(TaskResultEnum
						.valueOf(reimbursement.getProcessStatus()).getName());
			}
			advanceVos.add(advanceVo);
		}

		int count = reimbursementDao.countAdvancesByUserID(userID);
		return new ListResult<AdvanceVo>(advanceVos, count);
	}

	@Override
	public void updateProcessStatus(String processInstanceID,
			TaskResultEnum taskResult) {
		if (taskResult == null) {
			throw new RuntimeException("处理结果不合法！");
		}

		reimbursementDao.updateProcessStatusByProcessInstanceID(
				processInstanceID, taskResult.getValue());
	}

	@Override
	public void updateAdvanceProcessStatus(String processInstanceID,
			TaskResultEnum taskResult) {
		if (taskResult == null) {
			throw new RuntimeException("处理结果不合法！");
		}
		reimbursementDao.updateAdvanceProcessStatusByProcessInstanceID(
				processInstanceID, taskResult.getValue());
	}

	@Override
	public BankAccountVO getBankAccountByUserID(String userID) {
		BankAccountEntity bankAccountEntity = bankAccountDao
				.getBankAccountByUserID(userID);
		return BankAccountVOTransformer.INSTANCE.apply(bankAccountEntity);
	}

	@Override
	public void updateBankAccountByUserID(String userID,
			ReimbursementVO reimbursementVO) {
		BankAccountEntity bankAccountEntity = bankAccountDao
				.getBankAccountByUserID(userID);
		if (bankAccountEntity == null) {
			throw new RuntimeException("该用户的打款账号不存在！");
		}

		bankAccountEntity.setCardName(reimbursementVO.getCardName());
		bankAccountEntity.setBank(reimbursementVO.getBank());
		bankAccountEntity.setCardNumber(reimbursementVO.getCardNumber());
		bankAccountEntity.setUpdateTime(new Date());
		bankAccountDao.save(bankAccountEntity);
	}

	@Override
	public void updateAdvanceBankAccountByUserID(String userID,
			AdvanceVo advanceVo) {
		BankAccountEntity bankAccountEntity = bankAccountDao
				.getBankAccountByUserID(userID);
		if (bankAccountEntity == null) {
			throw new RuntimeException("该用户的打款账号不存在！");
		}

		bankAccountEntity.setCardName(advanceVo.getCardName());
		bankAccountEntity.setBank(advanceVo.getBank());
		bankAccountEntity.setCardNumber(advanceVo.getCardNumber());
		bankAccountEntity.setUpdateTime(new Date());
		bankAccountDao.save(bankAccountEntity);
	}

	@Override
	public ListResult<ReimbursementTaskVO> findReimbursementsByUserGroupIDs(
			List<TaskDefKeyEnum> tasks, List<Group> groups, List<String> users,
			String reimbursementNo, String beginDate, String endDate, int page,
			int limit) {
		String groupIDs = Arrays.toString(
				Lists2.transform(groups, new SafeFunction<Group, String>() {
					@Override
					protected String safeApply(Group input) {
						return "'" + input.getId() + "'";
					}
				}).toArray());
		String taskNames = Arrays.toString(Lists2
				.transform(tasks, new SafeFunction<TaskDefKeyEnum, String>() {
					@Override
					protected String safeApply(TaskDefKeyEnum input) {
						return "'" + input.getName() + "'";
					}
				}).toArray());
		String userIDs = Arrays.toString(
				Lists2.transform(users, new SafeFunction<String, String>() {
					@Override
					protected String safeApply(String input) {
						return "'" + input + "'";
					}
				}).toArray());
		String sql = "select DISTINCT task.ID_, task.PROC_INST_ID_, task.NAME_, task.TASK_DEF_KEY_, reimbursement.ReimbursementNo, reimbursement.TotalAmount "
				+ "from ACT_RU_TASK task, ACT_RU_IDENTITYLINK identityLink, OA_Reimbursement reimbursement "
				+ "where task.ID_ = identityLink.TASK_ID_ and task.PROC_INST_ID_ = reimbursement.ProcessInstanceID "
				+ "and identityLink.TYPE_ = 'candidate' and "
				+ "task.TASK_DEF_KEY_ in ("
				+ taskNames.substring(1, taskNames.length() - 1) + ") "
				+ "and (identityLink.GROUP_ID_ in ("
				+ groupIDs.substring(1, groupIDs.length() - 1) + ") "
				+ "or identityLink.USER_ID_ in ("
				+ userIDs.substring(1, userIDs.length() - 1) + ")) ";
		String whereSQL = generateWhereSQL(reimbursementNo, beginDate, endDate);
		sql += whereSQL;

		List<Object> result = baseDao.findPageList(sql, page, limit);
		List<ReimbursementTaskVO> taskVOs = createReimbursementTaskList(result);

		sql = "select count(DISTINCT task.ID_) from ACT_RU_TASK task, ACT_RU_IDENTITYLINK identityLink, OA_Reimbursement reimbursement "
				+ "where task.ID_ = identityLink.TASK_ID_ and task.PROC_INST_ID_ = reimbursement.ProcessInstanceID "
				+ "and identityLink.TYPE_ = 'candidate' and "
				+ "task.TASK_DEF_KEY_ in ("
				+ taskNames.substring(1, taskNames.length() - 1) + ") "
				+ "and (identityLink.GROUP_ID_ in ("
				+ groupIDs.substring(1, groupIDs.length() - 1) + ") "
				+ "or identityLink.USER_ID_ in ("
				+ userIDs.substring(1, userIDs.length() - 1) + "))";
		sql += whereSQL;
		Object countObj = baseDao.getUniqueResult(sql);
		int count = countObj == null ? 0 : ((BigInteger) countObj).intValue();
		return new ListResult<ReimbursementTaskVO>(taskVOs, count);
	}

	
	
	@Override
	public ListResult<ReimbursementTaskVO> findReimbursementsAll(String reimbursementNo, String beginDate,
			String endDate, int page, int limit) {
		String sql = "select DISTINCT task.ID_, task.PROC_INST_ID_, task.NAME_, task.TASK_DEF_KEY_, reimbursement.ReimbursementNo, reimbursement.TotalAmount "
				+ "from ACT_RU_TASK task, ACT_RU_IDENTITYLINK identityLink, OA_Reimbursement reimbursement "
				+ "where task.ID_ = identityLink.TASK_ID_ and task.PROC_INST_ID_ = reimbursement.ProcessInstanceID "
				+ "and identityLink.TYPE_ = 'candidate' ";
		String whereSQL = generateWhereSQL(reimbursementNo, beginDate, endDate);
		sql += whereSQL;
		
		List<Object> result = baseDao.findPageList(sql, page, limit);
		List<ReimbursementTaskVO> taskVOs = createReimbursementTaskList(result);

		sql = "select count(DISTINCT task.ID_) from ACT_RU_TASK task, ACT_RU_IDENTITYLINK identityLink, OA_Reimbursement reimbursement "
				+ "where task.ID_ = identityLink.TASK_ID_ and task.PROC_INST_ID_ = reimbursement.ProcessInstanceID "
				+ "and identityLink.TYPE_ = 'candidate' ";
		sql += whereSQL;
		Object countObj = baseDao.getUniqueResult(sql);
		int count = countObj == null ? 0 : ((BigInteger) countObj).intValue();
		return new ListResult<ReimbursementTaskVO>(taskVOs, count);
	}

	@Override
	public ListResult<AdvanceTaskVO> findAdvancessByUserGroupIDs(
			List<TaskDefKeyEnum> tasks, List<Group> groups, List<String> users,
			String reimbursementNo, String beginDate, String endDate, int page,
			int limit) {
		String groupIDs = Arrays.toString(
				Lists2.transform(groups, new SafeFunction<Group, String>() {
					@Override
					protected String safeApply(Group input) {
						return "'" + input.getId() + "'";
					}
				}).toArray());
		String taskNames = Arrays.toString(Lists2
				.transform(tasks, new SafeFunction<TaskDefKeyEnum, String>() {
					@Override
					protected String safeApply(TaskDefKeyEnum input) {
						return "'" + input.getName() + "'";
					}
				}).toArray());
		String userIDs = Arrays.toString(
				Lists2.transform(users, new SafeFunction<String, String>() {
					@Override
					protected String safeApply(String input) {
						return "'" + input + "'";
					}
				}).toArray());
		String sql = "select DISTINCT task.ID_, task.PROC_INST_ID_, task.NAME_, task.TASK_DEF_KEY_, reimbursement.ReimbursementNo, reimbursement.TotalAmount "
				+ "from ACT_RU_TASK task, ACT_RU_IDENTITYLINK identityLink, OA_Advance reimbursement "
				+ "where task.ID_ = identityLink.TASK_ID_ and task.PROC_INST_ID_ = reimbursement.ProcessInstanceID "
				+ "and identityLink.TYPE_ = 'candidate' and "
				+ "task.TASK_DEF_KEY_ in ("
				+ taskNames.substring(1, taskNames.length() - 1) + ") "
				+ "and (identityLink.GROUP_ID_ in ("
				+ groupIDs.substring(1, groupIDs.length() - 1) + ") "
				+ "or identityLink.USER_ID_ in ("
				+ userIDs.substring(1, userIDs.length() - 1) + ")) ";
		String whereSQL = generateWhereSQL(reimbursementNo, beginDate, endDate);
		sql += whereSQL;

		List<Object> result = baseDao.findPageList(sql, page, limit);
		List<AdvanceTaskVO> taskVOs = createAdvanceTaskList(result);

		sql = "select count(DISTINCT task.ID_) from ACT_RU_TASK task, ACT_RU_IDENTITYLINK identityLink, OA_Advance reimbursement "
				+ "where task.ID_ = identityLink.TASK_ID_ and task.PROC_INST_ID_ = reimbursement.ProcessInstanceID "
				+ "and identityLink.TYPE_ = 'candidate' and "
				+ "task.TASK_DEF_KEY_ in ("
				+ taskNames.substring(1, taskNames.length() - 1) + ") "
				+ "and (identityLink.GROUP_ID_ in ("
				+ groupIDs.substring(1, groupIDs.length() - 1) + ") "
				+ "or identityLink.USER_ID_ in ("
				+ userIDs.substring(1, userIDs.length() - 1) + "))";
		sql += whereSQL;
		Object countObj = baseDao.getUniqueResult(sql);
		int count = countObj == null ? 0 : ((BigInteger) countObj).intValue();
		return new ListResult<AdvanceTaskVO>(taskVOs, count);
	}

	
	
	@Override
	public ListResult<AdvanceTaskVO> findAdvancessAll(String reimbursementNo, String beginDate, String endDate,
			int page, int limit) {
		String sql = "select DISTINCT task.ID_, task.PROC_INST_ID_, task.NAME_, task.TASK_DEF_KEY_, reimbursement.ReimbursementNo, reimbursement.TotalAmount "
				+ "from ACT_RU_TASK task, ACT_RU_IDENTITYLINK identityLink, OA_Advance reimbursement "
				+ "where task.ID_ = identityLink.TASK_ID_ and task.PROC_INST_ID_ = reimbursement.ProcessInstanceID "
				+ "and identityLink.TYPE_ = 'candidate' ";
		String whereSQL = generateWhereSQL(reimbursementNo, beginDate, endDate);
		sql += whereSQL;

		List<Object> result = baseDao.findPageList(sql, page, limit);
		List<AdvanceTaskVO> taskVOs = createAdvanceTaskList(result);

		sql = "select count(DISTINCT task.ID_) from ACT_RU_TASK task, ACT_RU_IDENTITYLINK identityLink, OA_Advance reimbursement "
				+ "where task.ID_ = identityLink.TASK_ID_ and task.PROC_INST_ID_ = reimbursement.ProcessInstanceID "
				+ "and identityLink.TYPE_ = 'candidate' ";
		sql += whereSQL;
		Object countObj = baseDao.getUniqueResult(sql);
		int count = countObj == null ? 0 : ((BigInteger) countObj).intValue();
		return new ListResult<AdvanceTaskVO>(taskVOs, count);
	}

	@Override
	public ReimbursementVO getReimbursementVOByTaskID(String taskID) {
		ProcessInstance pInstance = processService.getProcessInstance(taskID);
		return (ReimbursementVO) runtimeService.getVariable(pInstance.getId(),
				"arg");
	}

	@Override
	public AdvanceVo getAdvanceVOByTaskID(String taskID) {
		ProcessInstance pInstance = processService.getProcessInstance(taskID);
		return (AdvanceVo) runtimeService.getVariable(pInstance.getId(), "arg");
	}

	@Override
	public ReimbursementVO getReimbursementVOByProcessInstanceID(
			String processInstanceID) {
		ReimbursementEntity reimbursementEntity = reimbursementDao
				.getReimbursementByProcessInstanceID(processInstanceID);
		ReimbursementVO reimbursementVO = ReimbursementVOTransformer.INSTANCE
				.apply(reimbursementEntity);
		StaffVO requestUser = staffService
				.getStaffByUserID(reimbursementVO.getRequestUserID());
		StaffVO payeeUser = staffService
				.getStaffByUserID(reimbursementVO.getPayeeID());
		reimbursementVO.setRequestUserName(
				requestUser == null ? "" : requestUser.getLastName());
		reimbursementVO
				.setPayeeName(payeeUser == null ? "" : payeeUser.getLastName());
		List<ReimbursementDetailEntity> detailEntities = reimbursementDetailDao
				.findReimbursementDetailsByReimbursementID(
						reimbursementVO.getReimbursementID(), 0);
		int size = detailEntities.size();
		String[] usages = new String[size];
		Double[] amounts = new Double[size];
		for (int i = 0; i < size; ++i) {
			ReimbursementDetailEntity detailEntity = detailEntities.get(i);
			usages[i] = detailEntity.getPurpose();
			amounts[i] = detailEntity.getAmount();
		}
		reimbursementVO.setUsage(usages);
		reimbursementVO.setAmount(amounts);
		return reimbursementVO;
	}

	@Override
	public AdvanceVo geAdvanceTaskVOByProcessInstanceID(
			String processInstanceID) {
		AdvanceEntity reimbursementEntity = reimbursementDao
				.getAdvanceByProcessInstanceID(processInstanceID);
		AdvanceVo reimbursementVO = AdvanceVOTransformer.INSTANCE
				.apply(reimbursementEntity);
		StaffVO requestUser = staffService
				.getStaffByUserID(reimbursementVO.getRequestUserID());
		StaffVO payeeUser = staffService
				.getStaffByUserID(reimbursementVO.getPayeeID());
		reimbursementVO.setRequestUserName(
				requestUser == null ? "" : requestUser.getLastName());
		reimbursementVO
				.setPayeeName(payeeUser == null ? "" : payeeUser.getLastName());

		List<ReimbursementDetailEntity> detailEntities = reimbursementDetailDao
				.findReimbursementDetailsByReimbursementID(
						reimbursementVO.getReimbursementID(), 1);
		int size = detailEntities.size();
		String[] usages = new String[size];
		Double[] amounts = new Double[size];
		for (int i = 0; i < size; ++i) {
			ReimbursementDetailEntity detailEntity = detailEntities.get(i);
			usages[i] = detailEntity.getPurpose();
			amounts[i] = detailEntity.getAmount();
		}
		reimbursementVO.setUsage(usages);
		reimbursementVO.setAmount(amounts);
		
		return reimbursementVO;
	}

	private String generateWhereSQL(String reimbursementNo, String beginDate,
			String endDate) {
		StringBuffer sql = new StringBuffer();
		if (!StringUtils.isBlank(reimbursementNo)) {
			sql.append("and reimbursement.ReimbursementNo like '%"
					+ reimbursementNo + "%' ");
		}
		if (!StringUtils.isBlank(beginDate)) {
			sql.append("and reimbursement.AddTime >= '" + beginDate
					+ " 00:00:00' ");
		}
		if (!StringUtils.isBlank(endDate)) {
			sql.append(
					"and reimbursement.AddTime <= '" + endDate + " 23:59:59' ");
		}
		return sql.toString();
	}

	@Override
	public List<ReimbursementTaskVO> createTaskVOListByTaskList(
			List<Task> tasks) {
		List<ReimbursementTaskVO> taskVOs = new ArrayList<ReimbursementTaskVO>();
		for (Task task : tasks) {
			// 查询流程实例
			ProcessInstance pInstance = runtimeService
					.createProcessInstanceQuery()
					.processInstanceId(task.getProcessInstanceId())
					.singleResult();
			// 查询流程参数
			ReimbursementVO arg = (ReimbursementVO) runtimeService
					.getVariable(pInstance.getId(), "arg");
			ReimbursementTaskVO reimbursementTaskVO = new ReimbursementTaskVO();
			reimbursementTaskVO.setProcessInstanceID(pInstance.getId());
			reimbursementTaskVO.setRequestUserName(arg.getUserName());
			reimbursementTaskVO.setRequestDate(arg.getRequestDate());
			reimbursementTaskVO.setTaskID(task.getId());
			reimbursementTaskVO.setTaskName(task.getName());
			reimbursementTaskVO.setTaskDefKey(task.getTaskDefinitionKey());
			reimbursementTaskVO.setTitle(arg.getTitle());
			reimbursementTaskVO.setReimbursementNo(arg.getReimbursementNo());
			reimbursementTaskVO.setTotalAmount(arg.getTotalAmount());
			taskVOs.add(reimbursementTaskVO);
		}
		return taskVOs;
	}

	@Override
	public List<AdvanceTaskVO> createAdvanceTaskVOListByTaskList(
			List<Task> tasks) {
		List<AdvanceTaskVO> taskVOs = new ArrayList<AdvanceTaskVO>();
		for (Task task : tasks) {
			// 查询流程实例
			ProcessInstance pInstance = runtimeService
					.createProcessInstanceQuery()
					.processInstanceId(task.getProcessInstanceId())
					.singleResult();
			// 查询流程参数
			AdvanceVo arg = (AdvanceVo) runtimeService
					.getVariable(pInstance.getId(), "arg");
			AdvanceTaskVO reimbursementTaskVO = new AdvanceTaskVO();
			reimbursementTaskVO.setProcessInstanceID(pInstance.getId());
			reimbursementTaskVO.setRequestUserName(arg.getUserName());
			reimbursementTaskVO.setRequestDate(arg.getRequestDate());
			reimbursementTaskVO.setTaskID(task.getId());
			reimbursementTaskVO.setTaskName(task.getName());
			reimbursementTaskVO.setTaskDefKey(task.getTaskDefinitionKey());
			reimbursementTaskVO.setTitle(arg.getTitle());
			reimbursementTaskVO.setReimbursementNo(arg.getReimbursementNo());
			reimbursementTaskVO.setTotalAmount(arg.getTotalAmount());
			taskVOs.add(reimbursementTaskVO);
		}
		return taskVOs;
	}

	private List<ReimbursementTaskVO> createReimbursementTaskList(
			List<Object> reimbursements) {
		List<ReimbursementTaskVO> taskVOs = new ArrayList<ReimbursementTaskVO>();
		for (Object task : reimbursements) {
			Object[] objs = (Object[]) task;
			// 查询流程实例
			ProcessInstance pInstance = runtimeService
					.createProcessInstanceQuery()
					.processInstanceId((String) objs[1]).singleResult();
			// 查询流程参数
			BaseVO arg = (BaseVO) runtimeService.getVariable(pInstance.getId(),
					"arg");
			ReimbursementTaskVO reimbursementTaskVO = new ReimbursementTaskVO();
			reimbursementTaskVO.setProcessInstanceID((String) objs[1]);
			reimbursementTaskVO.setRequestUserName(arg.getUserName());
			reimbursementTaskVO.setRequestDate(arg.getRequestDate());
			reimbursementTaskVO.setTaskID((String) objs[0]);
			reimbursementTaskVO.setTaskName((String) objs[2]);
			reimbursementTaskVO.setTaskDefKey((String) objs[3]);
			reimbursementTaskVO.setTitle(arg.getTitle());
			reimbursementTaskVO.setReimbursementNo((String) objs[4]);
			reimbursementTaskVO.setTotalAmount((Double) objs[5]);
			taskVOs.add(reimbursementTaskVO);
		}
		return taskVOs;
	}

	private List<AdvanceTaskVO> createAdvanceTaskList(
			List<Object> reimbursements) {
		List<AdvanceTaskVO> taskVOs = new ArrayList<>();
		for (Object task : reimbursements) {
			Object[] objs = (Object[]) task;
			// 查询流程实例
			ProcessInstance pInstance = runtimeService
					.createProcessInstanceQuery()
					.processInstanceId((String) objs[1]).singleResult();
			// 查询流程参数
			BaseVO arg = (BaseVO) runtimeService.getVariable(pInstance.getId(),
					"arg");
			AdvanceTaskVO reimbursementTaskVO = new AdvanceTaskVO();
			reimbursementTaskVO.setProcessInstanceID((String) objs[1]);
			reimbursementTaskVO.setRequestUserName(arg.getUserName());
			reimbursementTaskVO.setRequestDate(arg.getRequestDate());
			reimbursementTaskVO.setTaskID((String) objs[0]);
			reimbursementTaskVO.setTaskName((String) objs[2]);
			reimbursementTaskVO.setTaskDefKey((String) objs[3]);
			reimbursementTaskVO.setTitle(arg.getTitle());
			reimbursementTaskVO.setReimbursementNo((String) objs[4]);
			reimbursementTaskVO.setTotalAmount((Double) objs[5]);
			taskVOs.add(reimbursementTaskVO);
		}
		return taskVOs;
	}

	private void saveReimbursement(ReimbursementVO reimbursementVO,
			String processInstanceID) {
		Date now = new Date();
		ReimbursementEntity reimbursementEntity = ReimbursementEntity.builder()
				.reimbursementNo(reimbursementVO.getReimbursementNo())
				.userID(reimbursementVO.getUserID())
				.requestUserID(reimbursementVO.getRequestUserID())
				.payeeID(reimbursementVO.getPayeeID())
				.invoiceTitle(reimbursementVO.getInvoiceTitleID())
				.invoiceNum(reimbursementVO.getInvoiceNum())
				.detailNum(reimbursementVO.getDetailNum())
				.totalAmount(reimbursementVO.getTotalAmount())
				.processInstanceID(processInstanceID)
				.isDeleted(IsDeletedEnum.NOT_DELETED.getValue()).addTime(now)
				.reternenceId(reimbursementVO.getReternenceId())
				.reternenceMobile(reimbursementVO.getReternenceMobile())
				.reternenceName(reimbursementVO.getReternenceName())
				.showPerson2(reimbursementVO.getShowPerson2())
				.isFixedAsset(reimbursementVO.getIsFixedAsset())
				.fixedAssetNo(reimbursementVO.getFixedAssetNo()).updateTime(now)
				.moneyType(reimbursementVO.getMoneyType())
				.build();
		int reimbursementID = reimbursementDao.save(reimbursementEntity);

		int useSize = reimbursementVO.getUsage().length;
		String[] usage = reimbursementVO.getUsage();
		Double[] amount = reimbursementVO.getAmount();
		for (int i = 0; i < useSize; ++i) {
			ReimbursementDetailEntity reimbursementDetailEntity = ReimbursementDetailEntity
					.builder().reimbursementID(reimbursementID)
					.purpose(usage[i]).amount(amount[i])
					.isDeleted(IsDeletedEnum.NOT_DELETED.getValue())
					.addTime(now).updateTime(now).type("0").build();
			reimbursementDetailDao.save(reimbursementDetailEntity);
		}

		// 保存领款人打款账号
		BankAccountEntity bankAccount = bankAccountDao
				.getBankAccountByUserID(reimbursementVO.getPayeeID());
		if (bankAccount == null) {
			bankAccount = new BankAccountEntity();
			bankAccount.setIsDeleted(IsDeletedEnum.NOT_DELETED.getValue());
			bankAccount.setAddTime(new Date());
		}
		bankAccount.setUserID(reimbursementVO.getPayeeID());
		bankAccount.setCardName(reimbursementVO.getCardName());
		bankAccount.setBank(reimbursementVO.getBank());
		bankAccount.setCardNumber(reimbursementVO.getCardNumber());
		bankAccount.setUpdateTime(new Date());
		bankAccountDao.save(bankAccount);

	}
	private void saveAdvance(AdvanceVo advanceVo, String processInstanceID) {
		Date now = new Date();
		AdvanceEntity advanceEntity = AdvanceEntity.builder()
				.reimbursementNo(advanceVo.getReimbursementNo())
				.userID(advanceVo.getUserID())
				.requestUserID(advanceVo.getRequestUserID())
				.payeeID(advanceVo.getPayeeID())
				.invoiceTitle(advanceVo.getInvoiceTitleID())
				.invoiceNum(advanceVo.getInvoiceNum())
				.detailNum(advanceVo.getDetailNum())
				.totalAmount(advanceVo.getTotalAmount())
				.processInstanceID(processInstanceID)
				.isDeleted(IsDeletedEnum.NOT_DELETED.getValue()).addTime(now)
				.reternenceId(advanceVo.getReternenceId())
				.isHaveInvoice(advanceVo.getIsHaveInvoice())
				.reternenceMobile(advanceVo.getReternenceMobile())
				.reternenceName(advanceVo.getReternenceName())
				.showPerson2(advanceVo.getShowPerson2())
				.isFixedAsset(advanceVo.getIsFixedAsset())
				.fixedAssetNo(advanceVo.getFixedAssetNo()).updateTime(now)
				.moneyType(advanceVo.getMoneyType())
				.build();
		int reimbursementID = reimbursementDao.saveAdvance(advanceEntity);

		int useSize = advanceVo.getUsage().length;
		String[] usage = advanceVo.getUsage();
		Double[] amount = advanceVo.getAmount();
		for (int i = 0; i < useSize; ++i) {
			ReimbursementDetailEntity reimbursementDetailEntity = ReimbursementDetailEntity
					.builder().reimbursementID(reimbursementID)
					.purpose(usage[i]).amount(amount[i])
					.isDeleted(IsDeletedEnum.NOT_DELETED.getValue())
					.addTime(now).updateTime(now).type("1").build();
			reimbursementDetailDao.save(reimbursementDetailEntity);
		}

		// 保存领款人打款账号
		BankAccountEntity bankAccount = bankAccountDao
				.getBankAccountByUserID(advanceVo.getPayeeID());
		if (bankAccount == null) {
			bankAccount = new BankAccountEntity();
			bankAccount.setIsDeleted(IsDeletedEnum.NOT_DELETED.getValue());
			bankAccount.setAddTime(new Date());
		}
		bankAccount.setUserID(advanceVo.getPayeeID());
		bankAccount.setCardName(advanceVo.getCardName());
		bankAccount.setBank(advanceVo.getBank());
		bankAccount.setCardNumber(advanceVo.getCardNumber());
		bankAccount.setUpdateTime(new Date());
		bankAccountDao.save(bankAccount);

	}
	@Override
	public ListResult<ReimbursementVO> findReimbursementList(
			ReimbursementVO reimbursementVO, int page, int limit) {
		List<Object> list = baseDao.findPageList(
				getReimbursementListBySql(reimbursementVO), page, limit);
		List<ReimbursementVO> reimbursementVOs = new ArrayList<>();
		for (Object obj : list) {
			Object[] objs = (Object[]) obj;
			ReimbursementVO reimbursementVO2 = new ReimbursementVO();
			reimbursementVO2.setReimbursementNo((String) objs[0]);
			reimbursementVO2.setRequestUserName(staffService
					.getStaffByUserID((String) objs[1]).getLastName());
			reimbursementVO2.setTotalAmount((Double) objs[2]);
			reimbursementVO2.setRequestDate(objs[3] == null
					? ""
					: DateUtil.formateFullDate((Date) objs[3]));
			reimbursementVO2.setProcessInstanceID((String) objs[4]);
			reimbursementVOs.add(reimbursementVO2);
		}
		Object countObj = baseDao
				.getUniqueResult(getCountReimbursementBySql(reimbursementVO));
		int count = countObj == null ? 0 : ((BigInteger) countObj).intValue();
		return new ListResult<ReimbursementVO>(reimbursementVOs, count);
	}

	@Override
	public ListResult<AdvanceVo> findAdvanceList(
			ReimbursementVO reimbursementVO, int page, int limit) {
		List<Object> list = baseDao.findPageList(
				getAdvanceListBySql(reimbursementVO), page, limit);
		List<AdvanceVo> reimbursementVOs = new ArrayList<>();
		for (Object obj : list) {
			Object[] objs = (Object[]) obj;
			AdvanceVo reimbursementVO2 = new AdvanceVo();
			reimbursementVO2.setReimbursementNo((String) objs[0]);
			reimbursementVO2.setRequestUserName(staffService
					.getStaffByUserID((String) objs[1]).getLastName());
			reimbursementVO2.setTotalAmount((Double) objs[2]);
			reimbursementVO2.setRequestDate(objs[3] == null
					? ""
					: DateUtil.formateFullDate((Date) objs[3]));
			reimbursementVO2.setProcessInstanceID((String) objs[4]);
			reimbursementVOs.add(reimbursementVO2);
		}
		Object countObj = baseDao
				.getUniqueResult(getCountAdvanceBySql(reimbursementVO));
		int count = countObj == null ? 0 : ((BigInteger) countObj).intValue();
		return new ListResult<AdvanceVo>(reimbursementVOs, count);
	}

	private String getReimbursementListBySql(ReimbursementVO reimbursementVO) {
		StringBuffer sql = new StringBuffer(
				"select reimbursement.ReimbursementNo,reimbursement.RequestUserID, "
						+ "reimbursement.TotalAmount,reimbursement.AddTime, reimbursement.ProcessInstanceID from OA_Reimbursement reimbursement,OA_Staff staff "
						+ "where reimbursement.RequestUserID = staff.UserID and reimbursement.IsDeleted = 0 and staff.IsDeleted = 0 and staff.Status!=4 and reimbursement.processStatus= 11");
		sql.append(getWhereBySql(reimbursementVO));
		return sql.toString();

	}
	private String getAdvanceListBySql(ReimbursementVO reimbursementVO) {
		StringBuffer sql = new StringBuffer(
				"select reimbursement.ReimbursementNo,reimbursement.RequestUserID, "
						+ "reimbursement.TotalAmount,reimbursement.AddTime, reimbursement.ProcessInstanceID from OA_Advance reimbursement,OA_Staff staff "
						+ "where reimbursement.RequestUserID = staff.UserID and reimbursement.IsDeleted = 0 and staff.IsDeleted = 0 and staff.Status!=4 and reimbursement.processStatus= 11");
		sql.append(getWhereBySql(reimbursementVO));
		return sql.toString();

	}
	private String getCountReimbursementBySql(ReimbursementVO reimbursementVO) {
		StringBuffer sql = new StringBuffer(
				"select count(*) from OA_Reimbursement reimbursement,OA_Staff staff "
						+ "where reimbursement.RequestUserID = staff.UserID and reimbursement.IsDeleted = 0 and staff.IsDeleted = 0 and staff.Status!=4 and reimbursement.processStatus= 11");
		sql.append(getWhereBySql(reimbursementVO));
		return sql.toString();
	}
	private String getCountAdvanceBySql(ReimbursementVO reimbursementVO) {
		StringBuffer sql = new StringBuffer(
				"select count(*) from OA_Advance reimbursement,OA_Staff staff "
						+ "where reimbursement.RequestUserID = staff.UserID and reimbursement.IsDeleted = 0 and staff.IsDeleted = 0 and staff.Status!=4 and reimbursement.processStatus= 11");
		sql.append(getWhereBySql(reimbursementVO));
		return sql.toString();
	}
	private String getWhereBySql(ReimbursementVO reimbursementVO) {
		StringBuffer whereSql = new StringBuffer();
		if (!StringUtils.isBlank(reimbursementVO.getRequestUserName())) {
			whereSql.append(" and staff.StaffName like '%"
					+ reimbursementVO.getRequestUserName() + "%' ");
		}
		if (!StringUtils.isBlank(reimbursementVO.getBeginDate())) {
			whereSql.append(" and reimbursement.AddTime >= '"
					+ reimbursementVO.getBeginDate() + "'");
		}
		if (!StringUtils.isBlank(reimbursementVO.getEndDate())) {
			whereSql.append(" and reimbursement.AddTime <= '"
					+ reimbursementVO.getEndDate() + "'");
		}
		if (!StringUtils.isBlank(reimbursementVO.getReimbursementNo())) {
			whereSql.append(" and reimbursement.ReimbursementNo like '%"
					+ reimbursementVO.getReimbursementNo() + "%' ");
		}
		return whereSql.toString();

	}

	@Override
	public void setfinancialFirstAuditName(String instanceId, String name,
			int type) {
		reimbursementDao.setfinancialFirstAuditName(instanceId, name, type);
	}

	@Override
	public void setAdvanceFinancialFirstAuditName(String instanceId,
			String name, int type) {
		reimbursementDao.setAdvanceFinancialFirstAuditName(instanceId, name,
				type);

	}

	@Override
	public void updateRestartStatus(Integer reimbursementID) {
		String sql = "update OA_Reimbursement set reStart=1 where ReimbursementID="+reimbursementID;
		baseDao.excuteSql(sql);
	}

}
