package com.zhizaolian.staff.action;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.net.URLDecoder;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.activiti.engine.IdentityService;
import org.activiti.engine.identity.User;
import org.apache.commons.lang3.StringUtils;
import org.apache.struts2.ServletActionContext;
import org.springframework.beans.factory.annotation.Autowired;

import com.google.common.base.Strings;
import com.zhizaolian.staff.enums.Constants;
import com.zhizaolian.staff.enums.NicknameStatusEnum;
import com.zhizaolian.staff.enums.NicknameTypeEnum;
import com.zhizaolian.staff.service.PermissionService;
import com.zhizaolian.staff.service.StaffService;
import com.zhizaolian.staff.service.ViewReportService;
import com.zhizaolian.staff.utils.ShortMsgSender;
import com.zhizaolian.staff.vo.NicknameVO;
import com.zhizaolian.staff.vo.StaffVO;

import lombok.Getter;
import lombok.Setter;

public class LoginAction extends BaseAction {

	@Getter
	@Setter
	private StaffVO staffVO;
	@Getter
	@Setter
	private int status;
	
	@Getter
	@Setter
	private String errorMessage;
	@Getter
	private List<NicknameVO> nicknameVOs;
	
	@Autowired
	private StaffService staffService;
	@Autowired
	private PermissionService permissionService;
	@Autowired
	private IdentityService identityService;
	@Autowired
	private ViewReportService viewReportService;
	
	private static final long serialVersionUID = 1L;
	
	public String index() {
		if (!StringUtils.isEmpty(errorMessage)) {
			try {
				errorMessage = URLDecoder.decode(errorMessage, "utf-8");
			} catch (Exception e) {
				errorMessage = e.getMessage();
				return "exception-error";
			}
		}
		
		return "index";
	}
	
	public String login() {
		User user;
		StaffVO staff;
		try {
			user = staffService.loginValidate(staffVO.getUserName(), staffVO.getPassword());
			staff = staffService.getStaffByUserID(user.getId());
		} catch (Exception e) {
			errorMessage = e.getMessage();
			StringWriter sw = new StringWriter(); 
			e.printStackTrace(new PrintWriter(sw, true)); 
			logger.error(sw.toString());
			return "loginFail";
		}
		
		ServletActionContext.getContext().getSession().put("user", user);
		List<String> permissions = permissionService.findPermissionsByUserID(user.getId());
		if(permissions.contains(Constants.VIEW_WORK_REPORT)){
			viewReportService.checkPermission(permissions, user.getId());
		}
		ServletActionContext.getContext().getSession().put("permissions", permissions);
		
		if (user.getLastName().equals(staff.getLastName())) {
			return "firstLogin";
		}
		
		return "loginSuccess";
	}
	
	public String logout() {
		ServletActionContext.getContext().getSession().remove("user");
		ServletActionContext.getContext().getSession().remove("permissions");
		return "index";
	}
	
	public String initUserAccount() {
		if (!StringUtils.isEmpty(errorMessage)) {
			try {
				errorMessage = URLDecoder.decode(errorMessage, "utf-8");
			} catch (Exception e) {
				errorMessage = e.getMessage();
				StringWriter sw = new StringWriter(); 
				e.printStackTrace(new PrintWriter(sw, true)); 
				logger.error(sw.toString());
				return "exception-error";
			}
		}
		
		return "initUserAccount";
	}
	
	public String findNicknamesByType() {
		int type = request.getParameter("type")==null ? 0 : Integer.parseInt(request.getParameter("type"));
		nicknameVOs = staffService.findNicknamesByType(NicknameTypeEnum.valueOf(type));

		return "findNicknamesByType";
	}
	
	public String saveUserAccount() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "initUserAccountFailed";
		}
		
		String nicknameID = request.getParameter("nicknameID");
		String password = request.getParameter("password");
		NicknameVO nicknameVO = staffService.getNicknameByID(nicknameID==null?0:Integer.parseInt(nicknameID));
		if (nicknameVO == null) {
			errorMessage = "花名不存在，请重新选择！";
			return "initUserAccountFailed";
		}
		if (nicknameVO.getStatus() == NicknameStatusEnum.USED.getValue()) {
			errorMessage = "花名已使用，请重新选择！";
			return "initUserAccountFailed";
		}
	
		user.setLastName(nicknameVO.getName());
		user.setPassword(password);
		identityService.saveUser(user);
		staffService.updateNicknameStatus(nicknameVO.getNicknameID(), NicknameStatusEnum.USED);
		
		return "loginSuccess";
	}
	
	
	public String toResetStep1(){
		return "toResetStep1";
	}
	public String toResetStep2(){
		String userId=request.getParameter("userId");
		String code=request.getParameter("code");
		String savedKey=staffService.getUsefulValidateKeyByUserId(userId,false);
		if(savedKey==null||!savedKey.equals(code)){
			return "error";
		}
		User user = identityService.createUserQuery().userId(userId).singleResult();
		request.setAttribute("userId", userId);
		request.setAttribute("code", code);
		request.setAttribute("userName", user.getLastName());
		return "toResetStep2";
	}
	public String toResetStep3(){
		String userId=request.getParameter("userId");
		String code=request.getParameter("code");
		String password=request.getParameter("inputPassword");
		String savedKey=staffService.getUsefulValidateKeyByUserId(userId,false);
		if(savedKey==null||!savedKey.equals(code)){
			return "error";
		}else{
			staffService.updateUserPassword(userId, password);
		}
		return "toResetStep3";
	}
	public String updatePassWord(){
		try{
			String telephone1=request.getParameter("telephone1");
			String password=request.getParameter("password");
			StaffVO staffVO=new StaffVO();
			staffVO.setTelephone(telephone1);
			staffVO.setPassword(password);
			String userID=staffService.updateStaffTelephone(staffVO);
			User user = identityService.createUserQuery().userId(userID).singleResult();
			ServletActionContext.getContext().getSession().put("user", user);
			List<String> permissions = permissionService.findPermissionsByUserID(user.getId());
			ServletActionContext.getContext().getSession().put("permissions", permissions);			
			staffService.updateStaffTelephone(staffVO);						
		}catch(Exception e){
			e.printStackTrace();
			errorMessage = "查询错误："+e.getMessage();
			StringWriter sw = new StringWriter(); 
			e.printStackTrace(new PrintWriter(sw, true)); 
			logger.error(sw.toString());
			return "error";			
		}
		return "updatePassWord";
	}
	public void  getUserIdByKey(){
		String key = request.getParameter("key");
		String userId=null;
		Map<String, String> returnMap =  new HashMap<String,String>();
		
		userId=getUserIdByUserName(key);
		if(StringUtils.isBlank(userId)){
			userId=getUserIdByTelephone("'"+key+"'");
		}
		returnMap.put("userId", userId);
		if(StringUtils.isNotBlank(userId)){
			StaffVO staffVo=staffService.getStaffByUserID(userId);
			returnMap.put("telephone", staffVo.getTelephone());
		}
		printByJson(returnMap);
	}
	
	public void getStaffById(){
		Map<String, Object> returnMap =  new HashMap<String,Object>();
		StaffVO staffVo=staffService.getStaffByUserID(request.getParameter("id"));
		returnMap.put("staffVo", staffVo);
		printByJson(returnMap);

	}
	/**
	 * 根据 花名 获取UserId
	 */
	private String getUserIdByUserName(String userName){
		List<User> users = identityService.createUserQuery().userLastName(userName).list();
		if(org.apache.commons.collections4.CollectionUtils.isEmpty(users)){
			return null;
		}else{
			return users.get(0).getId();
		}
	}
	
	/**
	 * 根据电话号码获取userId
	 */
	private String getUserIdByTelephone(String telephone){
		StaffVO staffVo=staffService.getStaffByTelephone(telephone);
		return staffVo==null?null:staffVo.getUserID();
	}
	
	/**
	 * 获取验证码
	 */
	public void	getValidateKey(){
		String userId=request.getParameter("userId");
		String telephone=request.getParameter("telephone");
		int randomNumber=(int)(Math.random()*1000000);
		String validateKey=Strings.padStart(randomNumber+"", 6,'0');
		staffService.insertRestValidateKey(userId, validateKey);
		Map<String, Boolean> returnMap= new HashMap<String,Boolean>();
		try{
			ShortMsgSender.getInstance().send(telephone, "【智造链】重置密码验证码："+validateKey);	
		}catch(Exception e){
			e.printStackTrace();
			StringWriter sw = new StringWriter(); 
			e.printStackTrace(new PrintWriter(sw, true)); 
			logger.error(sw.toString());
		}
		returnMap.put("success", true);
		printByJson(returnMap);
	}
	public void checkValidateKey(){
		String userId=request.getParameter("userId");
		String validateKey=request.getParameter("validateKey");
		String savedKey=staffService.getUsefulValidateKeyByUserId(userId,true);
		int result=0;
		if(savedKey==null){
			result=1;
		}else if(!savedKey.equals(validateKey)){
			result=2;
		}else{
			result=3;
		}
		Map<String, Object> returnMap =new HashMap<String,Object>();
		returnMap.put("result", result);
		printByJson(returnMap);
	}
	public String toDemoPage(){
		return "toDemoPage";
	}

}
