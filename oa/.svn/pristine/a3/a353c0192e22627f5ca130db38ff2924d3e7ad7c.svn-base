package com.zhizaolian.staff.service.impl;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.activiti.engine.HistoryService;
import org.activiti.engine.IdentityService;
import org.activiti.engine.RuntimeService;
import org.activiti.engine.TaskService;
import org.activiti.engine.history.HistoricDetail;
import org.activiti.engine.history.HistoricVariableUpdate;
import org.activiti.engine.identity.Group;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Attachment;
import org.activiti.engine.task.Task;
import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.util.CollectionUtils;

import com.zhizaolian.staff.dao.BaseDao;
import com.zhizaolian.staff.dao.VacationDao;
import com.zhizaolian.staff.entity.VacationEntity;
import com.zhizaolian.staff.enums.CompanyIDEnum;
import com.zhizaolian.staff.enums.BusinessTypeEnum;
import com.zhizaolian.staff.enums.Constants;
import com.zhizaolian.staff.enums.IsDeletedEnum;
import com.zhizaolian.staff.enums.TaskDefKeyEnum;
import com.zhizaolian.staff.enums.TaskResultEnum;
import com.zhizaolian.staff.enums.VacationTypeEnum;
import com.zhizaolian.staff.service.PositionService;
import com.zhizaolian.staff.service.ProcessService;
import com.zhizaolian.staff.service.StaffService;
import com.zhizaolian.staff.service.VacationService;
import com.zhizaolian.staff.transformer.VacationVOTransFormer;
import com.zhizaolian.staff.utils.DateUtil;
import com.zhizaolian.staff.utils.ListResult;
import com.zhizaolian.staff.utils.Lists2;
import com.zhizaolian.staff.utils.SafeFunction;
import com.zhizaolian.staff.vo.GroupDetailVO;
import com.zhizaolian.staff.vo.StaffVO;
import com.zhizaolian.staff.vo.VacationTaskVO;
import com.zhizaolian.staff.vo.VacationVO;

public class VacationServiceImpl implements VacationService{

	@Autowired
	private RuntimeService runtimeService;
	@Autowired
	private TaskService taskService;
	@Autowired
	private IdentityService identityService;
	@Autowired
	private VacationDao vacationDao;
	@Autowired
	private PositionService positionService;
	@Autowired
	private StaffService staffService;
	@Autowired
	private ProcessService processService;
	@Autowired
	private BaseDao baseDao;
	@Autowired
	private HistoryService historyService;

	@Override
	public void startVacation(VacationVO vacation, File[] attachment, String[] attachmentFileName) throws Exception {
		vacation.setBusinessType(BusinessTypeEnum.VACATION.getName());
		vacation.setTitle(vacation.getRequestUserName()+"的"+BusinessTypeEnum.VACATION.getName());
		// 初始化任务参数
		Map<String, Object> vars = new HashMap<String, Object>();
		vars.put("arg", vacation);
		//只寻找一级
		String supervisor = staffService.querySupervisorOneStep(vacation.getRequestUserID());
		//如果没有主管 那么 组长审批
		if(StringUtils.isBlank(supervisor)){
			supervisor=staffService.queryHeadMan(vacation.getRequestUserID());
		} 
		if (StringUtils.isBlank(supervisor)) {
			supervisor=staffService.querySupervisor(vacation.getRequestUserID());
		}
		String manager = staffService.queryManager(vacation.getRequestUserID());
		List<String> hrGroupList = staffService.queryHRGroupList(vacation.getRequestUserID());
		if (StringUtils.isBlank(manager) || CollectionUtils.isEmpty(hrGroupList)) {
			throw new RuntimeException("未找到该申请的审批人！");
		}
		if (!staffService.hasGroupMember(hrGroupList)) {
			throw new RuntimeException("未找到该申请的审批人！");
		}
		vars.put("hrGroup", hrGroupList);
		vars.put("supervisor", supervisor);
		vars.put("manager", manager);

		ProcessInstance processInstance = runtimeService.startProcessInstanceByKey("Vacation");
		// 查询第一个任务
		Task task = taskService.createTaskQuery()
				.processInstanceId(processInstance.getId()).singleResult();
		// 设置任务受理人
		taskService.setAssignee(task.getId(), vacation.getUserID());
		if(null != attachment){
			for(File attach: attachment){
				//设置任务附件
				InputStream is = new FileInputStream(attach);
				taskService.createAttachment("picture", task.getId(), processInstance.getId(), "vacation picture", "WeChat screenshots", is);
			}
		}
		// 完成任务
		taskService.complete(task.getId(), vars);
		// 记录请假数据
		saveVacation(vacation, processInstance.getId(), attachment, attachmentFileName);
	}

	@Override
	public ListResult<VacationTaskVO> findVacationTasksByGroups(List<Group> groups, int page, int limit) {
		String arrayString = Arrays.toString(Lists2.transform(groups, new SafeFunction<Group, String>() {
			@Override
			protected String safeApply(Group input) {
				return "'"+input.getId()+"'";
			}
		}).toArray());
		String sql = "select DISTINCT task.ID_, task.PROC_INST_ID_, task.NAME_ from ACT_RU_TASK task, ACT_RU_IDENTITYLINK identityLink "
				+ "where task.ID_ = identityLink.TASK_ID_ and identityLink.TYPE_ = 'candidate' and task.TASK_DEF_KEY_ = '"+TaskDefKeyEnum.VACATION_HR_AUDIT.getName()+"' "
				+ "and identityLink.GROUP_ID_ in ("+arrayString.substring(1, arrayString.length()-1)+")";
		List<Object> result = baseDao.findPageList(sql, page, limit);
		List<VacationTaskVO> taskVOs = createTaskVOList(result);

		sql = "select count(DISTINCT task.ID_) from ACT_RU_TASK task, ACT_RU_IDENTITYLINK identityLink "
				+ "where task.ID_ = identityLink.TASK_ID_ and identityLink.TYPE_ = 'candidate' and task.TASK_DEF_KEY_ = '"+TaskDefKeyEnum.VACATION_HR_AUDIT.getName()+"' "
				+ "and identityLink.GROUP_ID_ in ("+arrayString.substring(1, arrayString.length()-1)+")";
		Object countObj = baseDao.getUniqueResult(sql);
		int count = countObj==null ? 0 : ((BigInteger)countObj).intValue();
		return new ListResult<VacationTaskVO>(taskVOs, count);
	}

	@Override
	public ListResult<VacationVO> findVacationListByUserID(String userID, int page, int limit) {
		// 查询OA_Vacation表的数据
		List<VacationEntity> vacationEntities = vacationDao.findVacationsByUserID(userID, page, limit);
		List<VacationVO> result = new ArrayList<VacationVO>();
		double dailyHours = 9;
		for (VacationEntity vacation : vacationEntities) {
			try {
				List<Group> groups = identityService.createGroupQuery().groupMember(vacation.getRequestUserID()).list();
				if (groups.size() <= 0) {
					//删除已离职员工的请假记录
					deleteVacationByVacationID(vacation.getVacationID());
					continue;
				}
				String companyID = groups.get(0).getType().split("_")[0];
				dailyHours = positionService.getDailyHoursByCompanyID(CompanyIDEnum.valueOf(Integer.parseInt(companyID)));
			} catch (Exception e) {
				throw new RuntimeException("获取员工所在分部作息时间信息失败！");
			}
			VacationVO vacationVO = new VacationVO();
			vacationVO.setProcessInstanceID(vacation.getProcessInstanceID());
			vacationVO.setBeginDate(vacation.getBeginDate()==null?"":DateUtil.formateFullDate(vacation.getBeginDate()));
			vacationVO.setEndDate(vacation.getEndDate()==null?"":DateUtil.formateFullDate(vacation.getEndDate()));
			double hours = vacation.getHours();
			vacationVO.setDays((int)Math.floor(hours/dailyHours));
			vacationVO.setShowHours(hours - dailyHours*vacationVO.getDays());
			vacationVO.setDailyHours(dailyHours);
			vacationVO.setVacationType(vacation.getVacationType());
			vacationVO.setReason(vacation.getReason());

			List<HistoricDetail> datas = historyService.createHistoricDetailQuery().processInstanceId(vacation.getProcessInstanceID()).list();
			for (HistoricDetail historicDetail : datas) {
				HistoricVariableUpdate variable = (HistoricVariableUpdate) historicDetail;
				if (variable.getVariableName().equals("arg")) {
					VacationVO arg = (VacationVO) variable.getValue();
					vacationVO.setRequestDate(arg.getRequestDate());
					vacationVO.setRequestUserName(arg.getRequestUserName());
					vacationVO.setTitle(arg.getTitle());
				}
			}
			//查询流程实例
			ProcessInstance pInstance = runtimeService.createProcessInstanceQuery()
					.processInstanceId(vacation.getProcessInstanceID()).singleResult();
			if (pInstance != null) {
				vacationVO.setStatus("处理中");
				vacationVO.setAssigneeUserName(processService.getProcessTaskAssignee(pInstance.getId()));
			} else {
				vacationVO.setStatus(TaskResultEnum.valueOf(vacation.getProcessStatus()).getName());
			}
/*			try {
				if (!StringUtils.isBlank(vacation.getAttachmentImage())) {
					String[] attachmentImages = vacation.getAttachmentImage().split("#&&#");
					List<byte[]> picList = new ArrayList<byte[]>();
					for(String attachment: attachmentImages){
						if(StringUtils.isNotBlank(attachment)){
							InputStream input = new FileInputStream(Constants.VACATION_FILE_DIRECTORY+attachment);
							ByteArrayOutputStream output = new ByteArrayOutputStream();
							byte[] buffer = new byte[4096];
							int n = 0;
							while (-1 != (n = input.read(buffer))) {
								output.write(buffer, 0, n);
							}
							picList.add( output.toByteArray());
							input.close();
							output.close();
						}
					}
					vacationVO.setPicLst(picList);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}*/
			result.add(vacationVO);
		}

		int count = vacationDao.countVacationsByUserID(userID);
		return new ListResult<VacationVO>(result, count);
	}

	@Override
	public void updateProcessStatus(String processInstanceID, TaskResultEnum taskResult) {
		if (taskResult == null) {
			throw new RuntimeException("审批结果不合法！");
		}

		vacationDao.updateProcessStatusByProcessInstanceID(processInstanceID, taskResult.getValue());
	}

	@Override
	public List<VacationVO> findVacationsByCompanyAndDate(Integer companyID, Date date) {
/*		String beginDate = DateUtil.formateDate(date) + positionService.getBeginTimeByCompanyID(CompanyIDEnum.valueOf(companyID));
		String endDate = DateUtil.formateDate(date) + positionService.getEndTimeByCompanyID(CompanyIDEnum.valueOf(companyID));*/
		String workTimes = CompanyIDEnum.valueOf(companyID).getTimeLimitByDate(null);
		String[] workTimeArray = workTimes.split(" ");
		String beginDate = DateUtil.formateDate(date) + " " + workTimeArray[0] + ":00";;
		String endDate = DateUtil.formateDate(date) + " " + workTimeArray[3] + ":00";;
		String sql = "select staff.StaffName, vacation.BeginDate, vacation.EndDate, staff.UserID from OA_Vacation vacation LEFT JOIN ACT_ID_MEMBERSHIP membership ON vacation.RequestUserID = membership.USER_ID_ "
				+ "LEFT JOIN ACT_ID_GROUP gp ON gp.ID_ = membership.GROUP_ID_ "
				+ "LEFT JOIN OA_Staff staff on staff.UserID = membership.USER_ID_ "
				+ "LEFT JOIN ACT_HI_PROCINST procinst ON procinst.PROC_INST_ID_ = vacation.ProcessInstanceID where "
				+ "vacation.IsDeleted = 0 and staff.IsDeleted = 0 and staff.Status != 4 "
				+ "and gp.TYPE_ like '"+companyID+"_%' and vacation.BeginDate < '"+endDate+"' and vacation.EndDate > '"+beginDate+"' "
				+ "and (vacation.ProcessInstanceID is null or (vacation.ProcessStatus = 1 and procinst.END_ACT_ID_ is not null)) "
				+ "group by vacation.VacationID";
		List<Object> result = baseDao.findBySql(sql);

		List<VacationVO> vacationVOs = new ArrayList<VacationVO>();
		for (Object object : result) {
			Object[] objs = (Object[]) object;
			VacationVO vacationVO = new VacationVO();
			vacationVO.setRequestUserName((String) objs[0]);
			vacationVO.setBeginDate(DateUtil.formateFullDate((Date) objs[1]));
			vacationVO.setEndDate(DateUtil.formateFullDate((Date)objs[2]));
			List<GroupDetailVO> groups = staffService.findGroupDetailsByUserID((String) objs[3]);
			vacationVO.setGroupList(Lists2.transform(groups, new SafeFunction<GroupDetailVO, String>() {
				@Override
				protected String safeApply(GroupDetailVO input) {
					return input.getCompanyName()+"—"+input.getDepartmentName()+"—"+input.getPositionName();
				}
			}));
			vacationVOs.add(vacationVO);
		}
		return vacationVOs;
	}

	private double calcWorkHours(Date beginDate, Date endDate, Integer companyID) {
		CompanyIDEnum company = CompanyIDEnum.valueOf(companyID);
		//String beginTime = positionService.getBeginTimeByCompanyID(company);
		//String endTime = positionService.getEndTimeByCompanyID(company);
		String workTimes = company.getTimeLimitByDate(null);
		String[] workTimeArray = workTimes.split(" ");
		String beginTime = " " + workTimeArray[0] + ":00";;
		String endTime = " " + workTimeArray[3] + ":00";;
		double daily = positionService.getDailyHoursByCompanyID(company);
		long breakDiff = DateUtil.getFullDate("2000-01-02"+beginTime).getTime()
				- DateUtil.getFullDate("2000-01-01"+endTime).getTime(); 
		long dailyTime = DateUtil.getFullDate("2000-01-01"+endTime).getTime()
				- DateUtil.getFullDate("2000-01-01"+beginTime).getTime(); 
		long diff = endDate.getTime() - beginDate.getTime();
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(endDate);
		int endDay = calendar.get(Calendar.DATE);
		calendar.setTime(beginDate);
		int beginDay = calendar.get(Calendar.DATE);
		double hours = Math.ceil((diff - breakDiff * (endDay-beginDay))/(60*30*1000))/2;
		double dailyHours = Math.ceil(dailyTime/(60*30*1000))/2;
		int day = (int)Math.floor(hours/dailyHours);
		double hour = hours - dailyHours * day;
		return daily*day + hour;
	}

	@Override
	public ListResult<VacationVO> findStatisticsPageListByCompanyAndMonth(Integer companyID,String userName, Date date, int page, int limit) {		
/*		String firstDay = DateUtil.getFirstDayofMonth(date) + positionService.getBeginTimeByCompanyID(CompanyIDEnum.valueOf(companyID));
		String lastDay = DateUtil.getLastDayofMonth(date) + positionService.getEndTimeByCompanyID(CompanyIDEnum.valueOf(companyID));*/
		String workTimes = CompanyIDEnum.valueOf(companyID).getTimeLimitByDate(null);
		String[] workTimeArray = workTimes.split(" ");
		String firstDay = DateUtil.getFirstDayofMonth(date) + " " + workTimeArray[0] + ":00";;
		String lastDay = DateUtil.getLastDayofMonth(date) + " " + workTimeArray[3] + ":00";;
		double dailyHours = positionService.getDailyHoursByCompanyID(CompanyIDEnum.valueOf(companyID));
		String sql = "SELECT s.UserID, s.StaffName, GROUP_CONCAT(s.Hours), GROUP_CONCAT(s.BeginDate), GROUP_CONCAT(s.EndDate),GROUP_CONCAT(s.VacationID) from("
				+ "SELECT staff.UserID, staff.StaffName,vacation.VacationID, vacation.Hours, vacation.BeginDate, vacation.EndDate FROM OA_Vacation vacation "
				+ "LEFT JOIN ACT_ID_MEMBERSHIP membership ON vacation.RequestUserID = membership.USER_ID_ "
				+ "LEFT JOIN ACT_ID_GROUP gp ON gp.ID_ = membership.GROUP_ID_ "
				+ "LEFT JOIN OA_Staff staff ON staff.UserID = membership.USER_ID_ "
				+ "LEFT JOIN ACT_HI_PROCINST procinst ON procinst.PROC_INST_ID_ = vacation.ProcessInstanceID "
				+ "WHERE vacation.IsDeleted = 0 AND staff.IsDeleted = 0 AND staff.Status != 4 "
				+ "AND gp.TYPE_ LIKE '"+companyID+"_%' AND vacation.BeginDate < '"+lastDay+"' ";
		if(StringUtils.isNotBlank(userName)){
			sql+=" AND staff.StaffName like '%"+userName+"%' ";
		}
		sql+= ( "AND vacation.EndDate > '"+firstDay+"' AND (vacation.ProcessInstanceID is null or (vacation.ProcessStatus = 1 "
				+ "AND procinst.END_ACT_ID_ IS NOT NULL)) GROUP BY vacation.VacationID) s GROUP BY s.StaffName");
		List<Object> result = baseDao.findPageList(sql, page, limit);

		List<VacationVO> vacationVOs = new ArrayList<VacationVO>();
		for (Object object : result) {
			Object[] objs = (Object[]) object;
			VacationVO vacationVO = new VacationVO();
			vacationVO.setRequestUserID((String) objs[0]);
			vacationVO.setRequestUserName((String) objs[1]);
			vacationVO.setShowHours(0.0);
			String[] hours = StringUtils.split((String) objs[2], ",");
			String[] beginDates = StringUtils.split((String) objs[3], ",");
			String[] endDates = StringUtils.split((String) objs[4], ",");
			List<String> dateDetail = new ArrayList<String>();
			for (int i = 0; i < hours.length; ++i) {
				double hour = Double.valueOf(hours[i]);
				Date beginDate = DateUtil.getFullDate(beginDates[i]).getTime()<=DateUtil.getFullDate(firstDay).getTime() ? DateUtil.getFullDate(firstDay) : DateUtil.getFullDate(beginDates[i]);
				Date endDate = DateUtil.getFullDate(endDates[i]).getTime()>=DateUtil.getFullDate(lastDay).getTime() ? DateUtil.getFullDate(lastDay) : DateUtil.getFullDate(endDates[i]);
				if (!beginDate.equals(DateUtil.getFullDate(beginDates[i])) || !endDate.equals(DateUtil.getFullDate(endDates[i]))) {
					hour = calcWorkHours(beginDate, endDate, companyID);
				}
				vacationVO.setShowHours(vacationVO.getShowHours()+hour);
				dateDetail.add(DateUtil.formateFullDate(beginDate)+"至"+DateUtil.formateFullDate(endDate));
			}
			vacationVO.setShowVacationIds( objs[5]==null?null:(String)objs[5]);
			vacationVO.setDateDetail(dateDetail);
			vacationVO.setDays((int)Math.floor(vacationVO.getShowHours()/dailyHours));
			vacationVO.setShowHours(vacationVO.getShowHours()-dailyHours*vacationVO.getDays());
			vacationVOs.add(vacationVO);
		}

		sql = "SELECT count(distinct staff.UserID) FROM OA_Vacation vacation "
				+ "LEFT JOIN ACT_ID_MEMBERSHIP membership ON vacation.RequestUserID = membership.USER_ID_ "
				+ "LEFT JOIN ACT_ID_GROUP gp ON gp.ID_ = membership.GROUP_ID_ "
				+ "LEFT JOIN OA_Staff staff ON staff.UserID = membership.USER_ID_ "
				+ "LEFT JOIN ACT_HI_PROCINST procinst ON procinst.PROC_INST_ID_ = vacation.ProcessInstanceID "
				+ "WHERE vacation.IsDeleted = 0 AND staff.IsDeleted = 0 AND staff.Status != 4 "
				+ "AND gp.TYPE_ LIKE '"+companyID+"_%' AND vacation.BeginDate < '"+lastDay+"' "
				+ "AND vacation.EndDate > '"+firstDay+"' AND (vacation.ProcessInstanceID is null or (vacation.ProcessStatus = 1 "
				+ "AND procinst.END_ACT_ID_ IS NOT NULL))";
		Object object = baseDao.getUniqueResult(sql);
		int count = object==null ? 0 : ((BigInteger)object).intValue();
		return new ListResult<VacationVO>(vacationVOs, count);
	}

	@Override
	public long calcVacationTime(Date begin, Date end, String userID) {
		long totalTime = end.getTime() - begin.getTime();
		List<VacationEntity> vacations = vacationDao.findVacationsByDate(begin, userID);
		long time1 = 0L;
		for (VacationEntity vacation : vacations) {
			//人事补录的请假记录，或者审批通过的请假记录
			if (StringUtils.isBlank(vacation.getProcessInstanceID()) || 
					runtimeService.createProcessInstanceQuery().processInstanceId(vacation.getProcessInstanceID()).singleResult() == null) {
				long diff = vacation.getEndDate().getTime() - begin.getTime();
				time1 = diff>time1 ? diff : time1;
			}
		}
		if (time1 >= totalTime) {
			return totalTime;
		}

		long time2 = 0L;
		vacations = vacationDao.findVacationsByDate(end, userID);
		for (VacationEntity vacation : vacations) {
			//人事补录的请假记录，或者审批通过的请假记录
			if (StringUtils.isBlank(vacation.getProcessInstanceID()) || 
					runtimeService.createProcessInstanceQuery().processInstanceId(vacation.getProcessInstanceID()).singleResult() == null) {
				long diff = end.getTime() - vacation.getBeginDate().getTime();
				time2 = diff>time2 ? diff : time2;
			}
		}
		if (time1+time2 >= totalTime) {
			return totalTime;
		}

		long time3 = 0L;
		vacations = vacationDao.findVacationsByDates(begin, end, userID);
		for (VacationEntity vacation : vacations) {
			if (StringUtils.isBlank(vacation.getProcessInstanceID()) || 
					runtimeService.createProcessInstanceQuery().processInstanceId(vacation.getProcessInstanceID()).singleResult() == null) {
				time3 += (vacation.getEndDate().getTime()-vacation.getBeginDate().getTime());
			}
		}
		return time1+time2+time3>totalTime ? totalTime : time1+time2+time3;
	}

	/*private List<TaskVO> createTaskVOList(List<Object> tasks) {
		List<TaskVO> taskVOs = new ArrayList<TaskVO>();
		for (Object task : tasks) {
			Object[] objs = (Object[]) task;
			//查询流程实例
			ProcessInstance pInstance = runtimeService.createProcessInstanceQuery()
					.processInstanceId((String)objs[1]).singleResult();
			//查询流程参数
			BaseVO arg = (BaseVO) runtimeService.getVariable(pInstance.getId(), "arg");
			TaskVO taskVO = new TaskVO();
			taskVO.setProcessInstanceID((String) objs[1]);
			taskVO.setRequestUserName(arg.getUserName());
			taskVO.setRequestDate(arg.getRequestDate());
			taskVO.setTaskID((String) objs[0]);
			taskVO.setTaskName((String) objs[2]);
			taskVO.setTitle(arg.getTitle());
			taskVOs.add(taskVO);
		}
		return taskVOs;
	}*/


	private void saveVacation(VacationVO vacation, String processInstanceID, File[] attachment, String[] attachmentFileName) {
		Date now = new Date();
		if (attachment != null) {
			InputStream in = null;
			OutputStream out = null;
			try {
				byte[] buffer = new byte[10*1024*1024];
				int length = 0;
				int index = 0;
				String fileNames = "";
				for(File attach: attachment){
					in = new FileInputStream(attach);
					File f=new File(Constants.VACATION_FILE_DIRECTORY);
					if(!f.exists()){
						f.mkdirs();
					}
					String fileName = now.getTime()+"_"+attachmentFileName[index];
					out=new FileOutputStream(new File(Constants.VACATION_FILE_DIRECTORY,fileName));
					while((length=in.read(buffer, 0, buffer.length))!=-1){
						out.write(buffer, 0, length);
					}
					if(index==0){
						fileNames += fileName;
					}else{
						fileNames += "#&&#"+fileName;
					}
					index++;
				}
				
				vacation.setAttachmentImage(fileNames);
			} catch (Exception e) {
				throw new RuntimeException("保存附件至服务器失败！");
			} finally {
				if(in!=null)
					try {
						in.close();
					} catch (IOException e) {
					}
				if(out!=null)
					try {
						out.close();
					} catch (IOException e) {
					}
			}
		}



		VacationEntity vacationEntity = VacationEntity.builder()
				.userID(vacation.getUserID())
				.requestUserID(vacation.getRequestUserID())
				.hours(vacation.getShowHours())
				.beginDate(DateUtil.getFullDate(vacation.getBeginDate()))
				.endDate(DateUtil.getFullDate(vacation.getEndDate()))
				.agentID(vacation.getAgentID())
				.vacationType(vacation.getVacationType())
				.reason(vacation.getReason())
				.processInstanceID(processInstanceID)
				.attachmentImage(vacation.getAttachmentImage())
				.isDeleted(IsDeletedEnum.NOT_DELETED.getValue())
				.addTime(now)
				.updateTime(now)
				.build();
		vacationDao.save(vacationEntity);
	}



	@Override
	public List<VacationEntity> findVacationsByRequestUserID(String requestUserID) {


		List<VacationEntity> vacationEntities=vacationDao.findVacationsByRequestUserID(requestUserID);

		return vacationEntities;
	}

	//如果请假人id 、开始时间、结束时间、请假类型、工作代理人的id相同则视为重复申请。

	@Override
	public boolean isDuplicateClaim(VacationVO vacationVO) {

		List<VacationEntity> vacationEntities=findVacationsByRequestUserID(vacationVO.getRequestUserID());
		for (VacationEntity vacationEntity : vacationEntities) {
			if(vacationVO.getBeginDate().equals(DateUtil.formateFullDate(vacationEntity.getBeginDate()))&&vacationVO.getEndDate().equals(DateUtil.formateFullDate(vacationEntity.getEndDate()))&&vacationVO.getVacationType().equals(vacationEntity.getVacationType())&&vacationVO.getAgentID().equals(vacationEntity.getAgentID())){
				return true;
			}
		}

		return false;
	}



	@Override
	public void updateVacation(VacationVO vacationVO) {
		VacationEntity vacationEntity = vacationDao.findVacationsByvacationID(vacationVO.getVacationID());
		vacationEntity.setHours(vacationVO.getShowHours());
		vacationEntity.setBeginDate(DateUtil.getFullDate(vacationVO.getBeginDate()));
		vacationEntity.setEndDate(DateUtil.getFullDate(vacationVO.getEndDate()));
		vacationEntity.setAgentID(vacationVO.getAgentID());
		vacationEntity.setVacationType(vacationVO.getVacationType());
		vacationEntity.setReason(vacationVO.getReason());
		if(vacationVO.getAttachmentImage()!=null){
			vacationEntity.setAttachmentImage(vacationVO.getAttachmentImage());
		}
		Date now = new Date();
		vacationEntity.setUpdateTime(now);
		vacationDao.save(vacationEntity);


	}



	@Override
	public void saveVacation(VacationVO vacation) {
		Date now = new Date();
		VacationEntity vacationEntity = VacationEntity.builder()
				.userID(vacation.getUserID())
				.requestUserID(vacation.getRequestUserID())
				.hours(vacation.getShowHours())
				.beginDate(DateUtil.getFullDate(vacation.getBeginDate()))
				.endDate(DateUtil.getFullDate(vacation.getEndDate()))
				.agentID(vacation.getAgentID())
				.vacationType(vacation.getVacationType())
				.reason(vacation.getReason())
				.attachmentImage(vacation.getAttachmentImage())
				.isDeleted(IsDeletedEnum.NOT_DELETED.getValue())
				.addTime(now)
				.updateTime(now)
				.build();
		vacationDao.save(vacationEntity);


	}

	@Override
	public void deleteVacationByVacationID(int vacationID) {
		VacationEntity vacationEntity = vacationDao.findVacationsByvacationID(vacationID);
		vacationDao.deleteVacationsByVacationEntity(vacationEntity);

	}

	@Override
	public VacationVO findVacationByVacationID(int vacationID) {
		VacationEntity vacationEntity = vacationDao.findVacationsByvacationID(vacationID);
		VacationVO vacationVO = VacationVOTransFormer.INSTANCE.apply(vacationEntity);
		vacationVO.setRequestUserName(staffService.getStaffByUserID(vacationEntity.getRequestUserID()).getLastName());
		if(!StringUtils.isBlank(vacationEntity.getAgentID())){
			vacationVO.setAgentName(staffService.getStaffByUserID(vacationEntity.getAgentID()).getLastName());
		}

		return vacationVO;
	}

	@Override
	public VacationVO getVacationByProcessInstanceID(String processInstanceID) {
		VacationEntity vacationEntity = vacationDao.getVacationByProcessInstanceID(processInstanceID);
		return VacationVOTransFormer.INSTANCE.apply(vacationEntity);
	}

	@Override
	public List<VacationTaskVO> createTaskVOListByTaskList(List<Task> tasks) {
		List<VacationTaskVO> taskVOs = new ArrayList<VacationTaskVO>();
		for (Task task : tasks) {
			taskVOs.add(getVacationTaskVOByTask(task));
		}
		return taskVOs;
	}

	@Override
	public VacationTaskVO getVacationTaskVOByTask(Task task) {
		ProcessInstance pInstance = runtimeService.createProcessInstanceQuery()
				.processInstanceId(task.getProcessInstanceId()).singleResult();
		System.out.println(pInstance.getId());
		//查询流程参数
		VacationVO arg = (VacationVO) runtimeService.getVariable(pInstance.getId(), "arg");
		VacationTaskVO taskVO = new VacationTaskVO();
		taskVO.setProcessInstanceID(task.getProcessInstanceId());
		taskVO.setRequestUserName(arg.getUserName());
		taskVO.setVacationUserId(arg.getUserID());
		taskVO.setRequestDate(arg.getRequestDate());
		taskVO.setTaskID(task.getId());
		taskVO.setTitle(arg.getTitle());
		taskVO.setDefKey(task.getTaskDefinitionKey());
		taskVO.setTaskName(task.getName());
		List<Attachment> attas = taskService.getProcessInstanceAttachments(task.getProcessInstanceId());
		taskVO.setAttachmentSize(attas.size());
		StaffVO staffVO = staffService.getStaffByUserID(arg.getRequestUserID());
		if (staffVO != null) {
			List<GroupDetailVO> groups = staffService.findGroupDetailsByUserID(staffVO.getUserID());
			taskVO.setGroupList(Lists2.transform(groups, new SafeFunction<GroupDetailVO, String>() {
				@Override
				protected String safeApply(GroupDetailVO input) {
					return input.getCompanyName()+"—"+input.getDepartmentName()+"—"+input.getPositionName();
				}
			}));
		}
		taskVO.setVacationUserName(arg.getRequestUserName());
		taskVO.setBeginDate(arg.getBeginDate());
		String showDays = "";
		int day = (int) Math.floor(arg.getShowHours()/arg.getDailyHours());
		if (day != 0) {
			showDays += (day+"天");
		}
		double hour = arg.getShowHours() - day*arg.getDailyHours();
		if (hour != 0) {
			showDays += (hour+"小时");
		}
		taskVO.setVacationTime(showDays);
		taskVO.setEndDate(arg.getEndDate());
		taskVO.setAgentName(arg.getAgentName());
		taskVO.setVacationType(VacationTypeEnum.valueOf(arg.getVacationType()).getName());
		taskVO.setReason(arg.getReason());
		return taskVO;
	}

	private List<VacationTaskVO> createTaskVOList(List<Object> tasks) {
		List<VacationTaskVO> taskVOs = new ArrayList<VacationTaskVO>();
		for (Object task : tasks) {
			Object[] objs = (Object[]) task;
			//查询流程实例
			ProcessInstance pInstance = runtimeService.createProcessInstanceQuery()
					.processInstanceId((String)objs[1]).singleResult();
			//查询流程参数
			VacationVO arg = (VacationVO) runtimeService.getVariable(pInstance.getId(), "arg");
			VacationTaskVO taskVO = new VacationTaskVO();
			taskVO.setProcessInstanceID((String) objs[1]);
			taskVO.setRequestUserName(arg.getUserName());
			taskVO.setRequestDate(arg.getRequestDate());
			taskVO.setTaskID((String) objs[0]);
			taskVO.setTaskName((String) objs[2]);
			taskVO.setTitle(arg.getTitle());
			List<Attachment> attas = taskService.getProcessInstanceAttachments(pInstance.getId());
			taskVO.setAttachmentSize(attas.size());
			StaffVO staffVO = staffService.getStaffByUserID(arg.getRequestUserID());
			if (staffVO != null) {
				List<GroupDetailVO> groups = staffService.findGroupDetailsByUserID(staffVO.getUserID());
				taskVO.setGroupList(Lists2.transform(groups, new SafeFunction<GroupDetailVO, String>() {
					@Override
					protected String safeApply(GroupDetailVO input) {
						return input.getCompanyName()+"—"+input.getDepartmentName()+"—"+input.getPositionName();
					}
				}));
			}
			taskVO.setVacationUserName(arg.getRequestUserName());
			taskVO.setBeginDate(arg.getBeginDate());
			String showDays = "";
			if(arg.getShowHours()==null||arg.getDailyHours()==null){
				arg.setDailyHours(new Double(9));
				runtimeService.setVariable(pInstance.getId(), "arg", arg);
			}
			int day = (int) Math.floor(arg.getShowHours()/arg.getDailyHours());
			if (day != 0) {
				showDays += (day+"天");
			}
			double hour = arg.getShowHours() - day*arg.getDailyHours();
			if (hour != 0) {
				showDays += (hour+"小时");
			}
			taskVO.setVacationTime(showDays);
			taskVO.setEndDate(arg.getEndDate());
			taskVO.setAgentName(arg.getAgentName());
			taskVO.setVacationType(VacationTypeEnum.valueOf(arg.getVacationType()).getName());
			taskVO.setReason(arg.getReason());
			taskVOs.add(taskVO);
		}
		return taskVOs;
	}



	@Override
	public VacationVO getDaysAndHours(String beginDate, String endDate, String userID,Integer companyID) {
/*		String firstDay =beginDate  + positionService.getBeginTimeByCompanyID(CompanyIDEnum.valueOf(companyID));
		String lastDay =endDate + positionService.getEndTimeByCompanyID(CompanyIDEnum.valueOf(companyID));*/
		String workTimes = CompanyIDEnum.valueOf(companyID).getTimeLimitByDate(null);
		String[] workTimeArray = workTimes.split(" ");
		String firstDay = beginDate + " " + workTimeArray[0] + ":00";;
		String lastDay = endDate + " " + workTimeArray[3] + ":00";;
		double dailyHours = positionService.getDailyHoursByCompanyID(CompanyIDEnum.valueOf(companyID));
		String sql = "SELECT s.UserID, s.StaffName, GROUP_CONCAT(s.Hours), GROUP_CONCAT(s.BeginDate), GROUP_CONCAT(s.EndDate) from("
				+ "SELECT staff.UserID, staff.StaffName, vacation.Hours, vacation.BeginDate, vacation.EndDate FROM OA_Vacation vacation "
				+ "LEFT JOIN ACT_ID_MEMBERSHIP membership ON vacation.RequestUserID = membership.USER_ID_ "
				+ "LEFT JOIN ACT_ID_GROUP gp ON gp.ID_ = membership.GROUP_ID_ "
				+ "LEFT JOIN OA_Staff staff ON staff.UserID = membership.USER_ID_ "
				+ "LEFT JOIN ACT_HI_PROCINST procinst ON procinst.PROC_INST_ID_ = vacation.ProcessInstanceID "
				+ "WHERE vacation.IsDeleted = 0 AND staff.IsDeleted = 0 AND staff.Status != 4 "
				+ "AND staff.UserID ='"+userID+"' "
				+ "AND vacation.BeginDate < '"+lastDay+"' "
				+ "AND vacation.EndDate > '"+firstDay+"' AND (vacation.ProcessInstanceID is null or (vacation.ProcessStatus = 1 "
				+ "AND procinst.END_ACT_ID_ IS NOT NULL)) GROUP BY vacation.VacationID) s GROUP BY s.StaffName ";
		List<Object> result = baseDao.findBySql(sql);

		List<VacationVO> vacationVOs = new ArrayList<VacationVO>();
		for (Object object : result) {
			Object[] objs = (Object[]) object;
			VacationVO vacationVO = new VacationVO();
			vacationVO.setRequestUserID((String) objs[0]);
			vacationVO.setRequestUserName((String) objs[1]);
			vacationVO.setShowHours(0.0);
			String[] hours = StringUtils.split((String) objs[2], ",");
			String[] beginDates = StringUtils.split((String) objs[3], ",");
			String[] endDates = StringUtils.split((String) objs[4], ",");
			List<String> dateDetail = new ArrayList<String>();
			for (int i = 0; i < hours.length; ++i) {
				double hour = Double.valueOf(hours[i]);
				Date beginDate1 = DateUtil.getFullDate(beginDates[i]).getTime()<=DateUtil.getFullDate(firstDay).getTime() ? DateUtil.getFullDate(firstDay) : DateUtil.getFullDate(beginDates[i]);
				Date endDate1 = DateUtil.getFullDate(endDates[i]).getTime()>=DateUtil.getFullDate(lastDay).getTime() ? DateUtil.getFullDate(lastDay) : DateUtil.getFullDate(endDates[i]);
				if (!beginDate1.equals(DateUtil.getFullDate(beginDates[i])) || !endDate1.equals(DateUtil.getFullDate(endDates[i]))) {
					hour = calcWorkHours(beginDate1, endDate1, companyID);
				}
				vacationVO.setShowHours(vacationVO.getShowHours()+hour);
				dateDetail.add(DateUtil.formateFullDate(beginDate1)+"至"+DateUtil.formateFullDate(endDate1));
			}
			vacationVO.setDateDetail(dateDetail);
			vacationVO.setDays((int)Math.floor(vacationVO.getShowHours()/dailyHours));
			vacationVO.setShowHours(vacationVO.getShowHours()-dailyHours*vacationVO.getDays());
			vacationVOs.add(vacationVO);
		}
		if(vacationVOs.size()>0){
			return vacationVOs.get(0);
		}
		return null;
	}

	@Override
	public Date getBeginAndEndTimeFirst(String time,String userId) {
		String sql=" select v.BeginDate from OA_Vacation  v where v.BeginDate<='"+time+"' and v.EndDate >='"+time+"' AND v.ProcessStatus='1' and v.IsDeleted='0' and v.UserID='"+userId+"' order by v.BeginDate asc ";
		List<Object> resultList=baseDao.findBySql(sql);
		if (resultList!=null&&resultList.size()>0) {
			return (Date)resultList.get(0);
		}
		return null;
	}

	@Override
	public Date getBeginAndEndTimeLast(String time,String userId) {
		String sql=" select v.EndDate from OA_Vacation  v where v.BeginDate<='"+time+"' and v.EndDate >='"+time+"' AND v.ProcessStatus='1' and v.IsDeleted='0'  and v.UserID='"+userId+"' order by v.EndDate desc ";
		List<Object> resultList=baseDao.findBySql(sql);
		if (resultList!=null&&resultList.size()>0) {
			return (Date)resultList.get(0);
		}
		return null;
	}

	@Override
	public long getEffectiveVacationTime(Date startTime, Date endTime,String userID) {
		String sql="select  v.BeginDate,v.EndDate from OA_Vacation v where ( v.EndDate>='"+startTime+"' or v.BeginDate<='"+endTime+"' )  AND v.ProcessStatus='1' and v.IsDeleted='0'  and v.UserID='"+userID+"' order by v.BeginDate  ";
		List<Object> resultList=baseDao.findBySql(sql);
		if (resultList!=null&&resultList.size()>0) {
			//因为只用于 迟到早退的判断 这里有效数据 正常只有一条  这里无论有几条 只取一条
			Object[] times=(Object[]) resultList.get(0);
			Date begin=((Date)times[0]).after(startTime)?(Date)times[0]:startTime;
			Date end=((Date)times[1]).after(endTime)?endTime:(Date)times[1];
			long time=end.getTime()-begin.getTime();
			return time>0?time:0;
		}
		return 0;
	}

	@Override
	public String getInstanceIdByVacationId(String id) {
		String sql="select v.ProcessInstanceID from OA_Vacation v where v.VacationID="+id;
		List<Object> result=baseDao.findBySql(sql);
		if(result==null||result.size()==0){
			return null;
		}
		return result.get(0)+"";
	}

	@Override
	public Date getRealEndTimeLast(String time, String userId) {
		String sql = "select v.EndDate as realEndTime from OA_Vacation v where v.BeginDate<='"+time+"' "+
					 "and SUBSTRING_INDEX(v.EndDate,' ',1) = SUBSTRING_INDEX('"+time+"',' ',1) "+
					 "AND v.ProcessStatus='1' and v.IsDeleted='0' and v.UserID='"+userId+"' order by v.EndDate desc";
		List<Object> resultLst=baseDao.findBySql(sql);
		if (null!=resultLst && resultLst.size()>0) {
			return (Date)resultLst.get(0);
		}
		return null;
	}

	@Override
	public Date getRealBeginTimeFirst(String time, String userId) {
		String sql = "select v.BeginDate as realBeginTime from OA_Vacation  v where v.EndDate >='"+time+"' "+ 
					 "and SUBSTRING_INDEX(v.BeginDate,' ',1) = SUBSTRING_INDEX('"+time+"',' ',1) "+
					 "AND v.ProcessStatus='1' and v.IsDeleted='0'  and v.UserID='"+userId+"' order by v.BeginDate";
		List<Object> resultLst=baseDao.findBySql(sql);
		if (null!=resultLst && resultLst.size()>0) {
			return (Date)resultLst.get(0);
		}
		return null;
	}

	@Override
	public String getProcessInstanceId(Integer vacationId) {
		String sql = "select ProcessInstanceID from OA_Vacation where VacationID="+vacationId;
		Object obj = baseDao.getUniqueResult(sql);
		if( null==obj){
			return "";
		}
		return obj+"";
	}
	public VacationTaskVO getVacationTaskVOByTask(String processInstanceId) {
		ProcessInstance pInstance = runtimeService.createProcessInstanceQuery()
				.processInstanceId(processInstanceId).singleResult();
		//查询流程参数
		VacationVO arg = (VacationVO) runtimeService.getVariable(pInstance.getId(), "arg");
		VacationTaskVO taskVO = new VacationTaskVO();
		taskVO.setProcessInstanceID(processInstanceId);
		taskVO.setRequestUserName(arg.getUserName());
		taskVO.setVacationUserId(arg.getUserID());
		taskVO.setRequestDate(arg.getRequestDate());
		taskVO.setTitle(arg.getTitle());
		List<Attachment> attas = taskService.getProcessInstanceAttachments(processInstanceId);
		taskVO.setAttachmentSize(attas.size());
		StaffVO staffVO = staffService.getStaffByUserID(arg.getRequestUserID());
		if (staffVO != null) {
			List<GroupDetailVO> groups = staffService.findGroupDetailsByUserID(staffVO.getUserID());
			taskVO.setGroupList(Lists2.transform(groups, new SafeFunction<GroupDetailVO, String>() {
				@Override
				protected String safeApply(GroupDetailVO input) {
					return input.getCompanyName()+"—"+input.getDepartmentName()+"—"+input.getPositionName();
				}
			}));
		}
		taskVO.setVacationUserName(arg.getRequestUserName());
		taskVO.setBeginDate(arg.getBeginDate());
		String showDays = "";
		int day = (int) Math.floor(arg.getShowHours()/arg.getDailyHours());
		if (day != 0) {
			showDays += (day+"天");
		}
		double hour = arg.getShowHours() - day*arg.getDailyHours();
		if (hour != 0) {
			showDays += (hour+"小时");
		}
		taskVO.setVacationTime(showDays);
		taskVO.setEndDate(arg.getEndDate());
		taskVO.setAgentName(arg.getAgentName());
		taskVO.setVacationType(VacationTypeEnum.valueOf(arg.getVacationType()).getName());
		taskVO.setReason(arg.getReason());
		return taskVO;
	}


}
