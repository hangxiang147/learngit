package com.zhizaolian.staff.service.impl;

import java.util.Calendar;
import java.util.Date;
import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;

import com.zhizaolian.staff.dao.BaseDao;
import com.zhizaolian.staff.entity.WeekReportEntity;
import com.zhizaolian.staff.enums.CompanyIDEnum;
import com.zhizaolian.staff.service.StaffService;
import com.zhizaolian.staff.service.WeekWorkReportService;
import com.zhizaolian.staff.utils.DateUtil;
import com.zhizaolian.staff.utils.ObjectByteArrTransformer;
import com.zhizaolian.staff.vo.GroupDetailVO;
import com.zhizaolian.staff.vo.NextWeekWorkPlan;
import com.zhizaolian.staff.vo.RiskVo;
import com.zhizaolian.staff.vo.ThisWeekWorkVo;

public class WeekWorkReportServiceImpl implements WeekWorkReportService {
	@Autowired
	private StaffService staffService;
	@Autowired
	private BaseDao baseDao;
	@Override
	public boolean checkCanWriteReport(String id) {
		List<GroupDetailVO> groups = staffService.findGroupDetailsByUserID(id);
		Integer companyID = groups.get(0).getCompanyID();
		String workTimes = CompanyIDEnum.valueOf(companyID).getTimeLimitByDate(null);
		String[] workTimeArray = workTimes.split(" ");
		String beginTime = workTimeArray[0];
		String endTime = workTimeArray[3];
		Date now = new Date();
		Date beginDate = DateUtil.getFullDate(DateUtil.formateDate(now)+" "+beginTime+":00");
		Date endDate = DateUtil.getFullDate(DateUtil.formateDate(now)+" "+endTime+":00");
		@SuppressWarnings("deprecation")
		int week = now.getDay();
		//周五、周六、周日或者周一
		if(week==5 || week==6 || week==7 || week==1){
			//若是周五，须检查有么有到下班时间
			if(week==5 && DateUtil.before(now, endDate)){
				return true;
			//若是周一，须检查有么有到上班时间
			}else if(week==1 && DateUtil.after(now, beginDate)){
				return true;
			}
			return false;
		}
		return true;
	}
	@Override
	public int saveWeekReport(WeekReportEntity weekReport, ThisWeekWorkVo thisWeekWorkVo, RiskVo riskVo,
			NextWeekWorkPlan nextWeekWorkPlan, String weekWorkSummary) throws Exception {
		weekReport.setThisWeekWorks(ObjectByteArrTransformer.toByteArray(thisWeekWorkVo));
		if(null != riskVo){
			weekReport.setRisks(ObjectByteArrTransformer.toByteArray(riskVo));
		}
		if(null != nextWeekWorkPlan){
			weekReport.setNextWorkPlans(ObjectByteArrTransformer.toByteArray(nextWeekWorkPlan));
		}
		weekReport.setWeekWorkSummary(weekWorkSummary);
		weekReport.setIsDeleted(0);
		weekReport.setAddTime(new Date());
		return baseDao.hqlSave(weekReport);
	}
	@Override
	public WeekReportEntity getWeekReportDetail(String weekReportId) {
		String hql = "from WeekReportEntity where id="+weekReportId;
		return (WeekReportEntity) baseDao.hqlfindUniqueResult(hql);
	}
	@Override
	public List<WeekReportEntity> getWeekReportList(String id, String beginDate, String endDate) throws Exception {
		String hql = "from WeekReportEntity where userId='"+id+"' and isDeleted=0";
		if(StringUtils.isNotBlank(beginDate)){
			hql += " and Date(addTime)>'"+beginDate+"'";
		}
		if(StringUtils.isNotBlank(endDate)){
			hql += " and Date(addTime)<'"+endDate+"'";
		}
		hql += " order by addTime desc";
		@SuppressWarnings("unchecked")
		List<WeekReportEntity> weekReportList = (List<WeekReportEntity>) baseDao.hqlfind(hql);
		for(WeekReportEntity weekReport: weekReportList){
			weekReport.setThisWeekWorkVo((ThisWeekWorkVo) ObjectByteArrTransformer.toObject(weekReport.getThisWeekWorks()));
			int thisWeekWorkNum = weekReport.getThisWeekWorkVo().getContent().length;
			int riskNum = 0;
			int nextWeekWorkNum = 0;
			byte[] risks = weekReport.getRisks();
			if(null != risks){
				weekReport.setRiskVo((RiskVo)ObjectByteArrTransformer.toObject(risks));
				riskNum = weekReport.getRiskVo().getResponsiblePerson().length;
			}
			byte[] nextWeekWorks = weekReport.getNextWorkPlans();
			if(null != nextWeekWorks){
				weekReport.setNextWeekWork((NextWeekWorkPlan) ObjectByteArrTransformer.toObject(nextWeekWorks));
				nextWeekWorkNum = weekReport.getNextWeekWork().getContent().length;
			}
			int maxNum = thisWeekWorkNum;
			if(riskNum>maxNum){
				maxNum = riskNum;
			}
			if(nextWeekWorkNum>maxNum){
				maxNum = nextWeekWorkNum;
			}
			weekReport.setMaxRow(maxNum);
		}
		return weekReportList;
	}
	@Override
	public boolean checkRepeatedReport(String userId) {
		List<GroupDetailVO> groups = staffService.findGroupDetailsByUserID(userId);
		Integer companyID = groups.get(0).getCompanyID();
		String workTimes = CompanyIDEnum.valueOf(companyID).getTimeLimitByDate(null);
		String[] workTimeArray = workTimes.split(" ");
		String endTime = workTimeArray[3];
		Calendar cal = Calendar.getInstance();
		//本周日报开始汇报的时间
		String reportBeginTime = "";
		Date now = cal.getTime();
		@SuppressWarnings("deprecation")
		int week = now.getDay();
		
		//周五
		if(week==5){
			reportBeginTime = DateUtil.formateDate(now)+" "+endTime+":00";
		//周六	
		}else if(week==6){
			cal.add(Calendar.DATE, -1);
			reportBeginTime = DateUtil.formateDate(cal.getTime())+" "+endTime+":00";
		//周天	
		}else if(week==7){
			cal.add(Calendar.DATE, -2);
			reportBeginTime = DateUtil.formateDate(cal.getTime())+" "+endTime+":00";
		//周一	
		}else{
			cal.add(Calendar.DATE, -3);
			reportBeginTime = DateUtil.formateDate(cal.getTime())+" "+endTime+":00";
		}
		String sql = "select count(*) from OA_WeekReport where addTime>='"+reportBeginTime
				+"' and addTime<='"+DateUtil.formateFullDate(now)+"' and isDeleted=0 and userId='"+userId+"'";
		int count = Integer.parseInt(baseDao.getUniqueResult(sql)+"");
		if(count>0){
			return false;
		}
		return true;
	}
}
