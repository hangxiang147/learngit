package com.zhizaolian.staff.utils;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;


import org.apache.commons.lang3.StringUtils;


public class DateUtil {

	public static Date getSimpleDate(String dateStr)
    {
		if (StringUtils.isBlank(dateStr)) {
			return null;
		}
		
        try
        {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            return sdf.parse(dateStr);
        }
        catch (ParseException e)
        {
            throw new RuntimeException("时间字符串解析失败，请联系系统管理员！");
        }
    }
	
	public static Date getFullDate(String dateStr)
    {
		if (StringUtils.isBlank(dateStr)) {
			return null;
		}
		 
        try
        {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            return sdf.parse(dateStr);
        }
        catch (ParseException e)
        {
            throw new RuntimeException("时间字符串解析失败，请联系系统管理员！");
        }
    }
	
	public static String formateDate(Date date)
    {
        try
        {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
            return sdf.format(date);
        }
        catch (Exception e)
        {
        	throw new RuntimeException("时间格式化失败，请联系系统管理员");
        }
    }
	public static String formateMonth(Date date)
    {
        try
        {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM");
            return sdf.format(date);
        }
        catch (Exception e)
        {
        	throw new RuntimeException("时间格式化失败，请联系系统管理员");
        }
    }
	public static String formateFullDate(Date date)
    {
        try
        {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            return sdf.format(date);
        }
        catch (Exception e)
        {
        	throw new RuntimeException("时间格式化失败，请联系系统管理员");
        }
    }
	
	public static String getTodayString() {
		Date d = new Date();
		return new SimpleDateFormat("yyyy-MM-dd").format(d);
	}
	
	public static String getNowString() {
		Date d = new Date();
		return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(d);
	}
	
	public static String getSpecifiedDayAfter(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.DATE, calendar.get(Calendar.DATE)+1);
		return new SimpleDateFormat("yyyy-MM-dd").format(calendar.getTime());
	}
	
	public static String getFirstDayofMonth(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.DATE, 1);
		return new SimpleDateFormat("yyyy-MM-dd").format(calendar.getTime());
	}
	
	public static String getFirstDayofMonth(int year, int month) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(new Date());
		calendar.set(Calendar.YEAR, year);
		calendar.set(Calendar.MONTH, month-1);
		calendar.set(Calendar.DATE, 1);
		return new SimpleDateFormat("yyyy-MM-dd").format(calendar.getTime());
	}
	
	public static String getLastDayofMonth(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE));
		return new SimpleDateFormat("yyyy-MM-dd").format(calendar.getTime());
	}
	
	public static String getLastDayofMonth(int year, int month) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(new Date());
		calendar.set(Calendar.YEAR, year);
		calendar.set(Calendar.MONTH, month-1);
		calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE));
		return new SimpleDateFormat("yyyy-MM-dd").format(calendar.getTime());
	}
	
	public static String getFirstDayofPreviousMonth(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.MONTH, -1);
		calendar.set(Calendar.DATE, 1);
		return new SimpleDateFormat("yyyy-MM-dd").format(calendar.getTime());
	}
	
	public static String getLastDayofPreviousMonth(Date date) {
		Calendar calendar = Calendar.getInstance();
		calendar.setTime(date);
		calendar.add(Calendar.MONTH, -1);
		calendar.set(Calendar.DATE, calendar.getActualMaximum(Calendar.DATE));
		return new SimpleDateFormat("yyyy-MM-dd").format(calendar.getTime());
	}
	
	private final static SimpleDateFormat SIMPLE_DATE_FORMAT_DAY=new SimpleDateFormat("yyyy-MM-dd");
	private final static SimpleDateFormat SIMPLE_DATE_FORMAT_MIN=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	public static Date parseDay(String dateStr){
		Date date=null;
		try{
			date=SIMPLE_DATE_FORMAT_DAY.parse(dateStr);
		}catch(Exception ignore){};
		return date;
	} 
	
	public static String getDayStr(Date date){
		String resultStr=null;
		try{
			resultStr=SIMPLE_DATE_FORMAT_DAY.format(date);
		}catch(Exception ignore){};
		return resultStr;
	}
	public static String getMinStr(Date date){
		String resultStr=null;
		try{
			resultStr=SIMPLE_DATE_FORMAT_MIN.format(date);
		}catch(Exception ignore){};
		return resultStr;
	}
	public static Date[] getJobBeginTimeAndEndTime(Date date){
		Date[] dates=null;
		try{
			dates=new Date[2];
			String dayStr=SIMPLE_DATE_FORMAT_DAY.format(date);
			dates[0]=SIMPLE_DATE_FORMAT_MIN.parse(dayStr+" 08:30");
			dates[1]=SIMPLE_DATE_FORMAT_MIN.parse(dayStr+" 18:00");
		}catch(Exception ignore){}
		return dates;
	}
	/**
	 * 比较date1是否在date2之后（包括相等）
	 * @param date1
	 * @param date2
	 * @return
	 */
	public static boolean after(Date date1, Date date2){
		if(date1.after(date2) || date1.equals(date2)){
			return true;
		}
		return false;
	}
	/**
	 * 比较date1是否在date2之前（包括相等）
	 * @param date1
	 * @param date2
	 * @return
	 */
	public static boolean before(Date date1, Date date2){
		if(date1.before(date2) || date1.equals(date2)){
			return true;
		}
		return false;
	}
	public static String formateTime(Date date)
    {
        try
        {
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm");
            return sdf.format(date);
        }
        catch (Exception e)
        {
        	throw new RuntimeException("时间格式化失败，请联系系统管理员");
        }
    }
    /**  
     * 计算两个日期之间相差的天数  
     * @param smdate 较小的时间 
     * @param bdate  较大的时间 
     * @return 相差天数 
     * @throws ParseException  
     */    
    public static int daysBetween(Date smDate,Date bDate) throws ParseException    
    {    
        SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");  
        smDate=sdf.parse(sdf.format(smDate));  
        bDate=sdf.parse(sdf.format(bDate));  
        Calendar cal = Calendar.getInstance();    
        cal.setTime(smDate);    
        long time1 = cal.getTimeInMillis();                 
        cal.setTime(bDate);    
        long time2 = cal.getTimeInMillis();         
        long between_days=(time2-time1)/(1000*3600*24);  
       return Integer.parseInt(String.valueOf(between_days));           
    }  
}
