package com.zhizaolian.staff.action.administration;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.activiti.engine.IdentityService;
import org.activiti.engine.RepositoryService;
import org.activiti.engine.TaskService;
import org.activiti.engine.identity.Group;
import org.activiti.engine.identity.User;
import org.activiti.engine.repository.ProcessDefinition;
import org.activiti.engine.runtime.ProcessInstance;
import org.activiti.engine.task.Task;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;

import com.zhizaolian.staff.action.BaseAction;
import com.zhizaolian.staff.entity.TripEntity;
import com.zhizaolian.staff.enums.BusinessTypeEnum;
import com.zhizaolian.staff.enums.CompanyIDEnum;
import com.zhizaolian.staff.enums.Constants;
import com.zhizaolian.staff.enums.TaskDefKeyEnum;
import com.zhizaolian.staff.enums.TaskResultEnum;
import com.zhizaolian.staff.service.BankAccountService;
import com.zhizaolian.staff.service.CarUseService;
import com.zhizaolian.staff.service.CardService;
import com.zhizaolian.staff.service.CertificateService;
import com.zhizaolian.staff.service.ChopService;
import com.zhizaolian.staff.service.CommonSubjectService;
import com.zhizaolian.staff.service.ContractService;
import com.zhizaolian.staff.service.EmailService;
import com.zhizaolian.staff.service.PositionService;
import com.zhizaolian.staff.service.ProcessService;
import com.zhizaolian.staff.service.StaffService;
import com.zhizaolian.staff.service.TripService;
import com.zhizaolian.staff.service.VitaeService;
import com.zhizaolian.staff.utils.ActionUtil;
import com.zhizaolian.staff.utils.ListResult;
import com.zhizaolian.staff.vo.CarUseVo;
import com.zhizaolian.staff.vo.CardVO;
import com.zhizaolian.staff.vo.CertificateBorrowVo;
import com.zhizaolian.staff.vo.ChangeBankAccountVo;
import com.zhizaolian.staff.vo.ChangeContractVo;
import com.zhizaolian.staff.vo.ChopBorrrowVo;
import com.zhizaolian.staff.vo.CommentVO;
import com.zhizaolian.staff.vo.CommonSubjectVo;
import com.zhizaolian.staff.vo.ContractBorrowVo;
import com.zhizaolian.staff.vo.ContractSignVo;
import com.zhizaolian.staff.vo.DepartmentVO;
import com.zhizaolian.staff.vo.EmailVO;
import com.zhizaolian.staff.vo.FormField;
import com.zhizaolian.staff.vo.GroupDetailVO;
import com.zhizaolian.staff.vo.IdBorrowVo;
import com.zhizaolian.staff.vo.PositionVO;
import com.zhizaolian.staff.vo.StaffVO;
import com.zhizaolian.staff.vo.TaskVO;
import com.zhizaolian.staff.vo.TripVo;
import com.zhizaolian.staff.vo.VitaeVo;

import lombok.Getter;
import lombok.Setter;

public class ProcessAction extends BaseAction {

	private static final long serialVersionUID = 1L;

	@Getter
	@Setter
	private String selectedPanel;
	@Getter
	private String errorMessage;
	@Getter
	@Setter
	private EmailVO emailVO;
	@Getter
	@Setter
	private CardVO cardVO;
	@Getter
	@Setter
	private CarUseVo carUseVo;
	@Setter
	@Getter
	private Integer page = 1;
	@Setter
	@Getter
	private Integer limit = 20;
	@Getter
	private Integer totalPage;
	@Setter
	private Integer result; // 任务处理结果
	@Setter
	@Getter
	private Integer type;
	@Setter
	@Getter
	private TripVo tripVo;

	@Autowired
	private CarUseService carUseService;
	@Autowired
	private StaffService staffService;
	@Autowired
	private EmailService emailService;
	@Autowired
	private ProcessService processService;
	@Autowired
	private IdentityService identityService;
	@Autowired
	private TaskService taskService;
	@Autowired
	private RepositoryService repositoryService;
	@Autowired
	private CardService cardService;
	@Autowired
	private PositionService positionService;
	@Autowired
	private TripService tripService;
	@Autowired
	private ChopService chopService;
	@Autowired
	private VitaeService vitaeService;
	@Autowired
	private CommonSubjectService commonSubjectService;
	
	@Autowired
	private CertificateService certificateService;
	
	@Autowired
	private ContractService contractService;
	
	@Autowired
	private BankAccountService bankAccountService;
	
	public String showEmailDiagram() {
		selectedPanel = "newEmail";
		return "emailDiagram";
	}
	
	public String vitaeQuery(){
		User user = (User) request.getSession().getAttribute("user");
		ListResult<Object> datas= vitaeService.getVitaeResultEntityByName(request.getParameter("name"), user.getId(), page, limit);
		request.setAttribute("name", request.getParameter("name"));
		request.setAttribute("userId", user.getId());
		int total = datas.getTotalCount();
		totalPage = total % limit == 0 ? total / limit : total / limit + 1;
		if (totalPage == 0) {
			totalPage = 1;
		}
		request.setAttribute("startIndex", (page - 1) * limit);
		request.setAttribute("resultList", datas.getList());
		return "vitaeQuery";
	}
	public String showVitaeDiagram() {
		selectedPanel = "newVitae";
		return "vitaeDiagram";
	}
	public String newVitae() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}
		StaffVO staff = staffService.getStaffByUserID(user.getId());
		request.setAttribute("staff", staff);
		selectedPanel = "newVitae";
		return "newVitae";
	}
	public String showCardDiagram() {
		selectedPanel = "newCard";
		return "cardDiagram";
	}
	
	public String findUserReimbursementList(){
		User user = (User) request.getSession().getAttribute("user");
		String code=request.getParameter("code");
		//查询除了发起 意外的所有流程
		String filterSql=" and t.NAME_ !='报销申请' and t.Name_ !='修改打款账号' ";
		if(StringUtils.isNotBlank(code)){
			filterSql+=" and r.ReimbursementNo like '%"+code+"%' ";
		}
		String startTime=request.getParameter("startTime");
		String endTime=request.getParameter("endTime");
		if(StringUtils.isNotBlank(startTime)){
			filterSql+=" and r.AddTime>= '"+startTime+"' ";
			request.setAttribute("startTime", startTime);
		}
		if(StringUtils.isNotBlank(endTime)){
			filterSql+=" and r.AddTime<= '"+endTime+"' ";
			request.setAttribute("endTime", endTime);
		}
		ListResult<Object> reimbursementList=processService.getAllInstanceIdByUserAndTypePrefix(user.getId(), "Reimbursement", page, limit,filterSql);
		int totalCount=reimbursementList.getTotalCount();
		totalPage=totalCount%limit ==0 ? totalCount/limit : totalCount/limit + 1;
		request.setAttribute("reimbursementList", reimbursementList.getList());
		request.setAttribute("userName", staffService.getRealNameByUserId(user.getId()));
		request.setAttribute("code", code);
		return "findUserReimbursementList";
	}

	public String findUserAdvanceList(){
		User user = (User) request.getSession().getAttribute("user");
		//查询除了发起 意外的所有流程
		String code=request.getParameter("code");
		String filterSql=" and t.NAME_ !='报销申请' and t.Name_ !='修改打款账号' ";
		if(StringUtils.isNotBlank(code)){
			filterSql+=" and r.ReimbursementNo like '%"+code+"%' ";
		}
		String startTime=request.getParameter("startTime");
		String endTime=request.getParameter("endTime");
		if(StringUtils.isNotBlank(startTime)){
			filterSql+=" and r.AddTime>= '"+startTime+"' ";
			request.setAttribute("startTime", startTime);
		}
		if(StringUtils.isNotBlank(endTime)){
			filterSql+=" and r.AddTime<= '"+endTime+"' ";
			request.setAttribute("endTime", endTime);
		}
		ListResult<Object> reimbursementList=processService.getAllInstanceIdByUserAndTypePrefix(user.getId(), "Advance", page, limit,filterSql);
		int totalCount=reimbursementList.getTotalCount();
		totalPage=totalCount%limit ==0 ? totalCount/limit : totalCount/limit + 1;
		request.setAttribute("reimbursementList", reimbursementList.getList());
		request.setAttribute("userName", staffService.getRealNameByUserId(user.getId()));
		request.setAttribute("code", code);
		return "findUserAdvanceList";
	}

	public String newEmail() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}
		StaffVO staff = staffService.getStaffByUserID(user.getId());
		request.setAttribute("staff", staff);

		selectedPanel = "newEmail";
		return "newEmail";
	}
	public String newCarUse(){
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}
		StaffVO staff = staffService.getStaffByUserID(user.getId());
		request.setAttribute("staff", staff);
		selectedPanel = "newCarUseTripFlow";
		return "newCarUse";
	}
	public String newCard() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}

		StaffVO staffVO = staffService.getStaffByUserID(user.getId());
		request.setAttribute("staff", staffVO);

		selectedPanel = "newCard";
		return "newCard";
	}

	public String startEmail() {
		try {
			emailService.startEmail(emailVO);
		} catch (Exception e) {
			errorMessage = "公司邮箱申请提交失败：" + e.getMessage();
			return "error";
		}

		type = BusinessTypeEnum.EMAIL.getValue();
		return "startEmail";
	}
	public String startCarUse() {
		try {
			carUseService.startCarUse(carUseVo);
		} catch (Exception e) {
			e.printStackTrace();
			errorMessage = "车辆预约提交失败：" + e.getMessage();
			return "error";
		}
		type = BusinessTypeEnum.CAR_USE.getValue();
		return "startEmail";
	}
	public String startCard() {
		try {
			cardService.startCard(cardVO);
		} catch (Exception e) {
			errorMessage = "工牌申请提交失败：" + e.getMessage();
			return "error";
		}

		type = BusinessTypeEnum.CARD.getValue();
		return "startCard";
	}

	public String findMyProcessList() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}

		int count = 0;
		try {
			switch (BusinessTypeEnum.valueOf(type)) {
			case EMAIL:
				ListResult<EmailVO> emailListResult = emailService.findEmailListByUserID(user.getId(), page, limit);
				request.setAttribute("emailVOs", emailListResult.getList());
				count = emailListResult.getTotalCount();
				break;
			case CARD:
				ListResult<CardVO> cardListResult = cardService.findCardListByUserID(user.getId(), page, limit);
				request.setAttribute("cardVOs", cardListResult.getList());
				count = cardListResult.getTotalCount();
				break;
			case BUSSNIESSTRIP:
				ListResult<TripVo> tripListResult = tripService.findTripListByUserID(user.getId(), page, limit);
				request.setAttribute("tripVOs", tripListResult.getList());
				count = tripListResult.getTotalCount();
				break;
			case CHOP_BORROW:
				ListResult<ChopBorrrowVo> chopBorrorList = chopService.findChopBorrrowListByUserID(user.getId(), page, limit);
				request.setAttribute("chopBorrowVos", chopBorrorList.getList());
				count = chopBorrorList.getTotalCount();
				break;
			case CERTIFICATE_BORROW:
				ListResult<CertificateBorrowVo> certificateBorrowLst = certificateService.findCertificateBorrowLstByUserID(user.getId(), page, limit);
				request.setAttribute("certificateBorrowVos", certificateBorrowLst.getList());
				count = certificateBorrowLst.getTotalCount();
				break;
			case CONTRACT_BORROW:
				ListResult<ContractBorrowVo> contractBorrowLst = contractService.findContractBorrowLstByUserID(user.getId(), page, limit);
				request.setAttribute("contractBorrowVos", contractBorrowLst.getList());
				count = contractBorrowLst.getTotalCount();
				break;
			case ID_BORROW:
				ListResult<IdBorrowVo> idBorrowList=chopService.findIdBorrrowListByUserID(user.getId(), page, limit);
				request.setAttribute("idBorrowVos", idBorrowList.getList());
				count = idBorrowList.getTotalCount();
				break;
			case CONTRACT:
				/*ListResult<ContractDetailVo> contractList=chopService.findContractListByUserID(user.getId(), page, limit);
				request.setAttribute("constractVos", contractList.getList());
				count = contractList.getTotalCount();*/
				ListResult<ContractSignVo> contractSignLst = contractService.findContractSignLstByUserId(user.getId(), page, limit);
				request.setAttribute("constractSignVos", contractSignLst.getList());
				count = contractSignLst.getTotalCount();
				break;
			case CAR_USE:
				Map<String, String> params= new HashMap<String,String>();
				params.put("userId", user.getId());
				ListResult<CarUseVo> carUseVos=carUseService.getCarUseByKeys(params, page, limit);
				request.setAttribute("carUseVos", carUseVos.getList());
				count = carUseVos.getTotalCount();
				break;
			case VITAE:
				ListResult<VitaeVo> vitaeList=vitaeService.getVitaeByKeys(user.getId(), page, limit);
				request.setAttribute("vitaeList", vitaeList.getList());
				count = vitaeList.getTotalCount();
				break;
			case COMMONSUBJECT:
				CommonSubjectVo commonSubjectVo=new  CommonSubjectVo();
				commonSubjectVo.setUserID(user.getId());
				ListResult<CommonSubjectVo> commonSubjectList=commonSubjectService.getCommonSubjectByKey(commonSubjectVo, null, page, limit);
				request.setAttribute("commonSubjectList", commonSubjectList.getList());
				count = commonSubjectList.getTotalCount();
				break;
			case CONTRACT_CHANGE:
				ListResult<ChangeContractVo> changeContractList = contractService.findChangeContractListByUserID(user.getId(), page, limit);
				request.setAttribute("changeContractVos", changeContractList.getList());
				count = changeContractList.getTotalCount();
				break;
			case BANK_ACCOUNT_CHANGE:
				ListResult<ChangeBankAccountVo> changeBankAccountList = bankAccountService.findChangeBankAccountListByUserID(user.getId(), page, limit);
				request.setAttribute("changeBankAccountVos", changeBankAccountList.getList());
				count = changeBankAccountList.getTotalCount();
				break;
			default:
				break;
			}

		} catch (Exception e) {
			e.printStackTrace();
			errorMessage = "查询失败：" + e.getMessage();
			return "error";
		}

		totalPage = count % limit == 0 ? count / limit : count / limit + 1;
		selectedPanel = "myProcessList";
		return "myProcessList";
	}

	public String processHistory() {
		String processInstanceID = request.getParameter("processInstanceID");
		List<CommentVO> comments = processService.getCommentsByProcessInstanceID(processInstanceID);
		List<TaskVO> finishedTaskVOs = processService.findFinishedTasksByProcessInstanceID(processInstanceID);
		request.setAttribute("comments", comments);
		request.setAttribute("finishedTaskVOs", finishedTaskVOs);
		selectedPanel = "myProcessList";
		return "processHistory";
	}

	public String findEmailList() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}

		List<Group> groups = identityService.createGroupQuery().groupMember(user.getId()).list();
		if (groups.size() <= 0) {
			selectedPanel = "emailList";
			return "emailList";
		}

		List<TaskDefKeyEnum> tasks = new ArrayList<TaskDefKeyEnum>();
		tasks.add(TaskDefKeyEnum.EMAIL_AUDIT);
		tasks.add(TaskDefKeyEnum.OPEN_MAILBOX);
		ListResult<TaskVO> taskListResult = processService.findTasksByUserGroupIDs(tasks, groups,
				Arrays.asList(user.getId()), page, limit);
		int count = taskListResult.getTotalCount();
		totalPage = count % limit == 0 ? count / limit : count / limit + 1;

		request.setAttribute("taskVOs", taskListResult.getList());
		selectedPanel = "emailList";
		return "emailList";
	}
	private final static String[] CAR_USE_LIST_PARAMS={"startTime","endTime","id","userName"};
	public String findCarUseList(){
		Map<String, String> params=ActionUtil.createMapByRequest(request, true, CAR_USE_LIST_PARAMS);
		params.put("status", "1");
		params.put("userId", params.get("id"));
		params.remove("id");
		ListResult<CarUseVo> carUseVos=carUseService.getCarUseByKeys(params, page, limit);
		int count = carUseVos.getTotalCount();
		totalPage = count % limit == 0 ? count / limit : count / limit + 1;
		request.setAttribute("carUseVos", carUseVos.getList());
		selectedPanel = "carUseList";
		return "carUseList";
		
	}

	public String findCardList() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}

		List<Group> groups = identityService.createGroupQuery().groupMember(user.getId()).list();
		if (groups.size() <= 0) {
			selectedPanel = "cardList";
			return "cardList";
		}

		List<TaskDefKeyEnum> tasks = new ArrayList<TaskDefKeyEnum>();
		tasks.add(TaskDefKeyEnum.CARD_AUDIT);
		tasks.add(TaskDefKeyEnum.MAKE_CARD);
		ListResult<TaskVO> taskListResult = processService.findTasksByUserGroupIDs(tasks, groups,
				Arrays.asList(user.getId()), page, limit);
		int count = taskListResult.getTotalCount();
		totalPage = count % limit == 0 ? count / limit : count / limit + 1;

		request.setAttribute("taskVOs", taskListResult.getList());
		selectedPanel = "cardList";
		return "cardList";
	}

	public String auditTask() {
		String taskID = request.getParameter("taskID");
		List<FormField> formFields = processService.getFormFields(taskID);
		List<CommentVO> comments = processService.getComments(taskID);
		Task task = taskService.createTaskQuery().taskId(taskID).singleResult();
		ProcessInstance processInstance = processService.getProcessInstance(taskID);
		ProcessDefinition processDefinition = repositoryService.createProcessDefinitionQuery()
				.processDefinitionId(processInstance.getProcessDefinitionId()).singleResult();
		List<TaskVO> finishedTaskVOs = processService.findFinishedTasksByProcessInstanceID(processInstance.getId());
		if (TaskDefKeyEnum.MAKE_CARD.getName().equals(task.getTaskDefinitionKey())) {
			CardVO cardVO = cardService.getCardVOByProcessInstanceID(processInstance.getId());
			User usr = identityService.createUserQuery().userId(cardVO.getRequestUserID()).singleResult();
			cardVO.setStaffNumber(usr.getFirstName());
			cardVO.setNickName(usr.getLastName());
			List<Group> groups = identityService.createGroupQuery().groupMember(cardVO.getRequestUserID()).list();
			if (groups.size() > 0) {
				String[] positions = groups.get(0).getType().split("_");
				CompanyIDEnum company = CompanyIDEnum.valueOf(Integer.parseInt(positions[0]));
				cardVO.setCompanyName(company == null ? "" : company.getName());
				DepartmentVO department = positionService.getDepartmentByID(Integer.parseInt(positions[1]));
				cardVO.setDepartmentName(department == null ? "" : department.getDepartmentName());
				PositionVO position = positionService.getPositionByPositionID(Integer.parseInt(positions[2]));
				cardVO.setPositionName(position == null ? "" : position.getPositionName());
			}
			request.setAttribute("cardVO", cardVO);
		}

		request.setAttribute("taskDefKey", task.getTaskDefinitionKey());
		request.setAttribute("businessKey", processDefinition.getKey());
		request.setAttribute("formFields", formFields);
		request.setAttribute("comments", comments);
		request.setAttribute("finishedTaskVOs", finishedTaskVOs);
		request.setAttribute("taskID", taskID);
		return "auditTask";
	}

	public String openMailBox() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}

		try {
			String taskID = request.getParameter("taskID");
			String comment = request.getParameter("comment");
			String confirmAddress = request.getParameter("confirmAddress");
			String originalPassword = request.getParameter("originalPassword");
			String loginUrl = request.getParameter("loginUrl");
			ProcessInstance pInstance = processService.getProcessInstance(taskID);
			if (result == TaskResultEnum.EMAIL_SUCCESS.getValue()) {
				// 确认邮箱开通信息
				emailService.confirmEmailAccount(pInstance.getId(), confirmAddress, originalPassword, loginUrl);
			}
			// 完成任务
			processService.completeTask(taskID, user.getId(), TaskResultEnum.valueOf(result), comment);
			// 更新业务表的流程节点状态processStatus
			processService.updateProcessStatus(pInstance.getId(), TaskResultEnum.valueOf(result),
					BusinessTypeEnum.EMAIL.getName());
		} catch (Exception e) {
			errorMessage = "处理失败：" + e.getMessage();
			return "error";
		}

		return "openMailBox";
	}

	public String taskComplete() {
		User user = (User) request.getSession().getAttribute("user");
		if (user == null) {
			errorMessage = "您尚未登录，请先登录！";
			return "error";
		}

		String taskID = request.getParameter("taskID");
		String comment = request.getParameter("comment");
		String businessType = request.getParameter("businessType");
		try {
			ProcessInstance pInstance = processService.getProcessInstance(taskID);
			
				// 完成任务
			processService.completeTask(taskID, user.getId(), TaskResultEnum.valueOf(result), comment);
			
			// 更新业务表的流程节点状态processStatus
			processService.updateProcessStatus(pInstance.getId(), TaskResultEnum.valueOf(result), businessType);
			
			
		} catch (Exception e) {
			errorMessage = "处理失败：" + e.getMessage();
			return "error";
		}
		return getBusinessTypeValue( businessType);
	}
	
	
	

	private String getBusinessTypeValue(String name) {
		if (BusinessTypeEnum.EMAIL.getName().equals(name)) {
			return "emailComplete";
		} else if (BusinessTypeEnum.CARD.getName().equals(name)) {
			return "cardComplete";
		}else if(BusinessTypeEnum.BUSSNIESSTRIP.getName().equals(name)){
			return "tripComplete";
		}
		return "emailComplete";
	}

	public String showBussinessTripFlow() {
		selectedPanel = "newBussinessTripApply";
		return "showBussinessTripFlow";
	}
	public String showCommonSubject(){
		selectedPanel="newCommonSubject";
		return "showCommonSubject";
	}
	
	public String  startCommonSubject(){
		selectedPanel="newCommonSubject";
		return "startCommonSubject";
	}
	public String showCarUseTripFlow(){
		selectedPanel = "newCarUseTripFlow";
		StaffVO staff = staffService.getStaffByUserID(((User) request.getSession().getAttribute("user")).getId());
		request.setAttribute("staff", staff);
		return "showCarUseTripFlow";

	}
	
	public String newBussinessTripApply() {
		StaffVO staff = staffService.getStaffByUserID(((User) request.getSession().getAttribute("user")).getId());
		request.setAttribute("staff", staff);
		selectedPanel = "newBussinessTripApply";
		return "newBussinessTripApply";
	}
	
	public String  startBussinessTripApply() {
		try {
			tripService.StartTrip(tripVo);
		} catch (Exception e) {
			errorMessage = "出差申请提交失败：" + e.getMessage();
			e.printStackTrace();
		}
		type = BusinessTypeEnum.BUSSNIESSTRIP.getValue();
		return "startTrip";
	}
	
	public String findTripList(){
		selectedPanel = "tripList";
		User user=(User) request.getSession().getAttribute("user");
		List<Group> groups = identityService.createGroupQuery().groupMember(user.getId()).list();
		if (groups.size() <= 0) {
			return "tripList";
		}
		List<TaskDefKeyEnum> tasks = new ArrayList<TaskDefKeyEnum>();
		tasks.add(TaskDefKeyEnum.BUSSINESSTRIP_CONFIRM);
		tasks.add(TaskDefKeyEnum.BUSSINESSTRIP_BUYTICKET);
		ListResult<TaskVO> taskListResult = processService.findTasksByUserGroupIDs(tasks, groups,
				Arrays.asList(user.getId()), page, limit);
		int count = taskListResult.getTotalCount();
		totalPage = count % limit == 0 ? count / limit : count / limit + 1;
		request.setAttribute("taskVOs", taskListResult.getList());
		return "tripList";
	}
	
	public String bussinessTripList(){
		Map<String, String> queryMap=ActionUtil.createMapByRequest(request,true, "startTime","endTime","userId","userName");
		ListResult<TripEntity> tripList=tripService.getTripByKeys(queryMap,page,limit);
		ActionUtil.setListResult(request, tripList,page,limit);
		selectedPanel="bussinessTripList";
		request.setAttribute("tripList", tripList.getList());;
		return "bussinessTripList";
	}
	@Getter
	@Setter
	private InputStream excelFile;
	@Getter
	private String excelFileName;
	public String  exportBussniessTrip(){
		try{
			Map<String, String> queryMap=ActionUtil.createMapByRequest(request,true, "startTime","endTime","userId","userName");
			HSSFWorkbook workbook = tripService.exportTrips(queryMap);
			ByteArrayOutputStream output = new ByteArrayOutputStream();
			workbook.write(output);
			byte[] ba = output.toByteArray();
			excelFile = new ByteArrayInputStream(ba);
			excelFileName = new String("出差明细.xlsx".getBytes(), "ISO8859-1");
			output.flush();
			output.close();
		}catch(Exception e){
			errorMessage = "导出excel失败："+e.getMessage();
			return "error";
		}
		return "exportBussniessTrip";
	}
	public String showApproveDetail(){
		String processInstanceID = request.getParameter("processInstanceID");
		List<CommentVO> comments = processService.getCommentsByProcessInstanceID(processInstanceID);
		List<TaskVO> finishedTaskVOs = processService.findFinishedTasksByProcessInstanceID(processInstanceID);
		request.setAttribute("comments", comments);
		request.setAttribute("finishedTaskVOs", finishedTaskVOs);
		String department = "";
		String userId = "";
		String businessType = request.getParameter("businessType");
		switch(businessType){
			case Constants.CONTRACT_SIGN:
				ContractSignVo contractSignVo = contractService.getContractSignVoByProcessInstanceId(processInstanceID);
				request.setAttribute("contractSignVo", contractSignVo);
				userId = contractSignVo.getUserID();
			break;
			case Constants.CONTRACT_CHANGE:
				ChangeContractVo changeContractVo = contractService.getChangeContractVoByProcessInstanceId(processInstanceID);
				request.setAttribute("changeContractVo", changeContractVo);
				userId = changeContractVo.getUserID();
			break;
			case Constants.BANK_ACCOUNT:
				ChangeBankAccountVo changeBankAccountVo = bankAccountService.getChangeBankAccountVoByProcessInstanceId(processInstanceID);
				request.setAttribute("changeBankAccountVo", changeBankAccountVo);
				userId = changeBankAccountVo.getUserID();
			break;
		}
		List<GroupDetailVO> groupDetails = staffService.findGroupDetailsByUserID(userId);
		if (org.apache.commons.collections4.CollectionUtils.isNotEmpty(groupDetails)) {
			GroupDetailVO group = groupDetails.get(0);
			department += group.getCompanyName() + "-" + group.getDepartmentName();
		}
		request.setAttribute("department", department);
		request.setAttribute("businessType", businessType);
		return "showApproveDetail";
	}
}
