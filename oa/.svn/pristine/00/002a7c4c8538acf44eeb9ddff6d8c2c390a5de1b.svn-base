package com.zhizaolian.staff.service.impl;

import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.SQLQuery;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import com.zhizaolian.staff.dao.BaseDao;
import com.zhizaolian.staff.dao.PermissionMembershipDao;
import com.zhizaolian.staff.entity.PartnerDetailEntity;
import com.zhizaolian.staff.entity.PartnerEntity;
import com.zhizaolian.staff.entity.PartnerOptionEntity;
import com.zhizaolian.staff.enums.Constants;
import com.zhizaolian.staff.service.PartnerService;
import com.zhizaolian.staff.utils.EscapeUtil;
import com.zhizaolian.staff.utils.ListResult;

public class PartnerServiceImpl implements PartnerService {
	@Autowired
	private BaseDao baseDao;
	@Autowired
	private SessionFactory sessionFactory;
	@Autowired
	private PermissionMembershipDao permissionMembershipDao;
	@Override
	public PartnerEntity getPartnerApplyByUserId(String userId) {
		String hql = "from PartnerEntity where isDeleted=0 and ifNull(status, 0)!=2 and userId='"+userId+"'";
		return (PartnerEntity) baseDao.hqlfindUniqueResult(hql);
	}
	@Override
	public void startPartner(PartnerEntity partner) {
		partner.setAddTime(new Date());
		partner.setIsDeleted(0);
		baseDao.hqlSave(partner);
	}
	@SuppressWarnings("unchecked")
	@Override
	public List<PartnerEntity> getPartnerApplysByUserId(String userId) {
		String hql = "from PartnerEntity where isDeleted=0 and userId='"+userId+"'";
		return (List<PartnerEntity>) baseDao.hqlfind(hql);
	}
	@Override
	public PartnerEntity getPartnerApplyById(String id) {
		String hql = "from PartnerEntity where id="+id;
		return (PartnerEntity) baseDao.hqlfindUniqueResult(hql);
	}
	@SuppressWarnings("unchecked")
	@Override
	public ListResult<Object> findAllApplyPartners(Integer limit, Integer page, String applyer) {
		String sql = "select partner.id, staffName, applyDate, ifNull(partner.status, 0) status, comment from OA_Partner partner, OA_Staff staff where "
				+ "partner.userId=staff.userId and staff.status!=4 and staff.isDeleted=0 "
				+ "and partner.isDeleted=0 ";
		List<Object> objectList = null;
		if(StringUtils.isNotBlank(applyer)){
			sql += "and staff.staffName like:applyer order by status, partner.addTime desc";
			objectList = sessionFactory.getCurrentSession().createSQLQuery(sql).
					setParameter("applyer", "%"+applyer+"%").setMaxResults(limit).setFirstResult((page-1)*limit).list();
		}else{
			sql += "order by status, partner.addTime desc";
			objectList = sessionFactory.getCurrentSession().createSQLQuery(sql).setMaxResults(limit).setFirstResult((page-1)*limit).list();
		}
		String sqlCount = "select count(partner.id) from OA_Partner partner, OA_Staff staff where "
				+ "partner.userId=staff.userId and staff.status!=4 and staff.isDeleted=0 "
				+ "and partner.isDeleted=0 ";
		int count = 0;
		if(StringUtils.isNotBlank(applyer)){
			sqlCount += "and staff.staffName like:applyer";
			count = Integer.parseInt(sessionFactory.getCurrentSession().createSQLQuery
					(sqlCount).setParameter("applyer", "%"+applyer+"%").uniqueResult()+"");
		}else{
			count = Integer.parseInt(sessionFactory.getCurrentSession().createSQLQuery(sqlCount).uniqueResult()+"");
		}
		return new ListResult<>(objectList, count);
	}
	@Override
	public void auditApply(String applyId, String result, String comment) {
		String sql = "update OA_Partner set status="+result+", comment='"+EscapeUtil.decodeSpecialChars(comment)+"' where id="+applyId;
		baseDao.excuteSql(sql);
	}
	@Override
	public int getToAuditApplyNum() {
		String sql = "select count(*) from OA_Partner where status is null and isDeleted=0";
		return Integer.parseInt(baseDao.getUniqueResult(sql)+"");
	}
	@Override
	public boolean checkHasAuditPartner(String id) {
		return permissionMembershipDao.checkHasPermissionByUserId(Constants.AUDIT_PARTNER, id);
	}
	@Override
	public void savePartnerDetail(PartnerDetailEntity partnerDetail) {
		if(StringUtils.isBlank(partnerDetail.getUserIds())){
			List<Object> allPartners = getAllPartner();
			for(Object obj: allPartners){
				String partner = (String)obj;
				PartnerDetailEntity partnerEntity = new PartnerDetailEntity();
				partnerEntity.setContent(partnerDetail.getContent());
				partnerEntity.setDetailType(partnerDetail.getDetailType());
				partnerEntity.setMoney(partnerDetail.getMoney());
				partnerEntity.setRewardType(partnerDetail.getRewardType());
				partnerEntity.setTheme(partnerDetail.getTheme());
				partnerEntity.setUserId(partner);
				partnerEntity.setAddTime(new Date());
				partnerEntity.setIsDeleted(0);
				int id = baseDao.hqlSave(partnerEntity);
				if(Constants.OPTION.equals(partnerDetail.getRewardType())){
					PartnerOptionEntity staffOption = new PartnerOptionEntity();
					staffOption.setDetailId(id);
					staffOption.setOptionMoney(partnerDetail.getMoney());
					staffOption.setPurchaseDate(new Date());
					staffOption.setPurchaseType(Constants.COMPANY_REWARD);
					staffOption.setStatus("1");//已匹配
					staffOption.setUserId(partner);
					staffOption.setAddTime(new Date());
					staffOption.setIsDeleted(0);
					baseDao.hqlSave(staffOption);
				}
			}
		}else{
			String[] userIds = partnerDetail.getUserIds().split(",");
			for(String partner: userIds){
				PartnerDetailEntity partnerEntity = new PartnerDetailEntity();
				partnerEntity.setContent(partnerDetail.getContent());
				partnerEntity.setDetailType(partnerDetail.getDetailType());
				partnerEntity.setMoney(partnerDetail.getMoney());
				partnerEntity.setRewardType(partnerDetail.getRewardType());
				partnerEntity.setTheme(partnerDetail.getTheme());
				partnerEntity.setUserId(partner);
				partnerEntity.setAddTime(new Date());
				partnerEntity.setIsDeleted(0);
				int id = baseDao.hqlSave(partnerEntity);
				if(Constants.OPTION.equals(partnerDetail.getRewardType())){
					PartnerOptionEntity staffOption = new PartnerOptionEntity();
					staffOption.setDetailId(id);
					staffOption.setOptionMoney(partnerDetail.getMoney());
					staffOption.setPurchaseDate(new Date());
					staffOption.setPurchaseType(Constants.COMPANY_REWARD);
					staffOption.setStatus("1");//已匹配
					staffOption.setUserId(partner);
					staffOption.setIsDeleted(0);
					staffOption.setAddTime(new Date());
					baseDao.hqlSave(staffOption);
				}
			}
		}
	}
	private List<Object> getAllPartner() {
		String sql = "select userId from OA_Partner where isDeleted=0 and status=1";
		return baseDao.findBySql(sql);
	}
	@SuppressWarnings("unchecked")
	@Override
	public ListResult<Object> findPartnerDetailList(String type, String staffName, Integer limit, Integer page) {
		String sql = "select detail.id, staffName, detailType, rewardType, money, theme, content from OA_PartnerDetail detail, OA_Staff staff where "
				+ "detail.userId=staff.userId and staff.status!=4 and staff.isDeleted=0 "
				+ "and detail.isDeleted=0 ";
		if(StringUtils.isNotBlank(staffName)){
			sql += "and staff.staffName like:staffName ";
		}
		if(StringUtils.isNotBlank(type)){
			sql += "and detailType=:detailType ";
		}
		sql += "order by detail.addTime desc";
		SQLQuery sqlQuery = sessionFactory.getCurrentSession().createSQLQuery(sql);
		if(StringUtils.isNotBlank(staffName)){
			sqlQuery.setParameter("staffName", "%"+staffName+"%");
		}
		if(StringUtils.isNotBlank(type)){
			sqlQuery.setParameter("detailType", type);
		}
		List<Object> objList = sqlQuery.setMaxResults(limit).setFirstResult((page-1)*limit).list();
		String sqlCount = "select count(detail.id) from OA_PartnerDetail detail, OA_Staff staff where "
				+ "detail.userId=staff.userId and staff.status!=4 and staff.isDeleted=0 "
				+ "and detail.isDeleted=0 ";
		if(StringUtils.isNotBlank(staffName)){
			sqlCount += "and staff.staffName like:staffName ";
		}
		if(StringUtils.isNotBlank(type)){
			sqlCount += "and detailType=:detailType";
		}
		sqlQuery = sessionFactory.getCurrentSession().createSQLQuery(sqlCount);
		if(StringUtils.isNotBlank(staffName)){
			sqlQuery.setParameter("staffName", "%"+staffName+"%");
		}
		if(StringUtils.isNotBlank(type)){
			sqlQuery.setParameter("detailType", type);
		}
		int count = Integer.parseInt(sqlQuery.uniqueResult()+"");
		return new ListResult<>(objList, count);
	}
	@Override
	public boolean checkIsPartner(String userId) {
		String sql = "select count(id) from OA_Partner where userId='"+userId+"' and status=1 and isDeleted=0";
		int count = Integer.parseInt(baseDao.getUniqueResult(sql)+"");
		if(count>0){
			return true;
		}
		return false;
	}
	@Override
	public double getTotalMoney(String id) {
		String sql = "select sum(money) from OA_PartnerOption where isDeleted=0 and userId='"+id+"'";
		Object obj = baseDao.getUniqueResult(sql);
		return Double.parseDouble(null==obj ? "0":String.valueOf(obj));
	}
	@Override
	public double getOptionMonty(String id) {
		String sql = "select sum(optionMoney) from OA_PartnerOption where isDeleted=0 and userId='"+id+"'";
		Object obj = baseDao.getUniqueResult(sql);
		return Double.parseDouble(null==obj ? "0":String.valueOf(obj));
	}
	@Override
	public Map<String, List<String>> getDetailListGroupByType(String userId) {
		String sql = "SELECT\n" +
				"	detailType,\n" +
				"	GROUP_CONCAT(theme ORDER BY addTime separator '###')\n" +
				"FROM\n" +
				"	oa_partnerdetail\n" +
				"WHERE\n" +
				"	isDeleted=0 and userId = '"+userId+"'\n" +
				"GROUP BY\n" +
				"	detailType";
		List<Object> objList = baseDao.findBySql(sql);
		Map<String, List<String>> typeAndDetailListMap = new HashMap<>();
		for(Object obj: objList){
			Object[] objs = (Object[])obj;
			String detailType = (String)objs[0];
			String themeStr = (String)objs[1];
			String[] themes = themeStr.split("###");
			typeAndDetailListMap.put(detailType, Arrays.asList(themes));
		}
		return typeAndDetailListMap;
	}
	@SuppressWarnings("unchecked")
	@Override
	public ListResult<PartnerOptionEntity> findPartnerOptionsByUserId(String id, Integer limit, Integer page) {
		String hql = "from PartnerOptionEntity where userId='"+id+"' and isDeleted=0";
		List<PartnerOptionEntity> partnerOptions = (List<PartnerOptionEntity>) baseDao.hqlPagedFind(hql, page, limit);
		String sqlCount = "select count(id) from OA_PartnerOption where userId='"+id+"' and isDeleted=0";
		int count = Integer.parseInt(baseDao.getUniqueResult(sqlCount)+"");
		return new ListResult<>(partnerOptions, count);
	}
	@SuppressWarnings("unchecked")
	@Override
	public ListResult<Object> findPartnerDetailListByUserId(String type, String userId, Integer limit, Integer page) {
		String sql = "select detailType, rewardType, money, theme, content from OA_PartnerDetail detail where "
				+ "detail.isDeleted=0 and detail.userId=:userId and detailType=:detailType order by detail.addTime desc";
		SQLQuery sqlQuery = sessionFactory.getCurrentSession().createSQLQuery(sql);
		sqlQuery.setParameter("detailType", type);
		sqlQuery.setParameter("userId", userId);
		List<Object> objList = sqlQuery.setMaxResults(limit).setFirstResult((page-1)*limit).list();
		String sqlCount = "select count(detail.id) from OA_PartnerDetail detail where "
				+ "detail.isDeleted=0 and detail.userId=:userId and detailType=:detailType";
		sqlQuery = sessionFactory.getCurrentSession().createSQLQuery(sqlCount);
		sqlQuery.setParameter("detailType", type);
		sqlQuery.setParameter("userId", userId);
		int count = Integer.parseInt(sqlQuery.uniqueResult()+"");
		return new ListResult<>(objList, count);
	}
	@Override
	public void deletePartnerDetail(String id, String rewardType) {
		String sql = "update OA_PartnerDetail set isDeleted=1 where id="+id;
		baseDao.excuteSql(sql);
		sql = "update OA_PartnerOption set isDeleted=1 where detailId="+id;
		baseDao.excuteSql(sql);
	}
	@Override
	public ListResult<Object> findPartnerOptions(String[] conditons, Integer limit, Integer page) {
		String sql = "select id, purchaseDate, staffName, money, optionMoney, purchaseType,\n"
				+ "op.status from OA_PartnerOption op, OA_Staff staff where op.isDeleted=0\n"
				+ "and op.userId=staff.userId\n";
		String purchaseBeginDate = conditons[0];
		String purchaseEndDate = conditons[1];
		String purchaserId = conditons[2];
		String purchaseType = conditons[3];
		String status = conditons[4];
		if(StringUtils.isNotBlank(purchaseBeginDate)){
			sql += "and Date(purchaseDate)>='"+purchaseBeginDate+"'\n";
		}
		if(StringUtils.isNotBlank(purchaseEndDate)){
			sql += "and Date(purchaseDate)<='"+purchaseEndDate+"'\n";
		}
		if(StringUtils.isNotBlank(purchaserId)){
			sql += "and op.userId='"+purchaserId+"'\n";
		}
		if(StringUtils.isNotBlank(purchaseType)){
			sql += "and purchaseType='"+purchaseType+"'\n";
		}
		if(StringUtils.isNotBlank(status)){
			sql += "and op.status='"+status+"'\n";
		}
		sql += "order by op.addTime desc";
		List<Object> partnerOptions = baseDao.findPageList(sql, page, limit);
		String sqlCount = "select count(op.id)\n"
				+ "status from OA_PartnerOption op, OA_Staff staff where op.isDeleted=0\n"
				+ "and op.userId=staff.userId\n";
		if(StringUtils.isNotBlank(purchaseBeginDate)){
			sqlCount += "and Date(purchaseDate)>='"+purchaseBeginDate+"'\n";
		}
		if(StringUtils.isNotBlank(purchaseEndDate)){
			sqlCount += "and Date(purchaseDate)<='"+purchaseEndDate+"'\n";
		}
		if(StringUtils.isNotBlank(purchaserId)){
			sqlCount += "and op.userId='"+purchaserId+"'\n";
		}
		if(StringUtils.isNotBlank(purchaseType)){
			sqlCount += "and purchaseType='"+purchaseType+"'\n";
		}
		if(StringUtils.isNotBlank(status)){
			sqlCount += "and op.status='"+status+"'";
		}
		int count = Integer.parseInt(baseDao.getUniqueResult(sqlCount)+"");
		return new ListResult<>(partnerOptions, count);
	}
	@Override
	public boolean checkHasPartnerManage(String id) {
		return permissionMembershipDao.checkHasPermissionByUserId(Constants.PARTNER_MANAGE, id);
	}
	@Override
	public int getToMacthOptionNum() {
		String sql = "select count(*) from OA_PartnerOption where status=0 and isDeleted=0";
		return Integer.parseInt(baseDao.getUniqueResult(sql)+"");
	}
	@Override
	public void matchPartnerOption(String matchPartnerIds, String ratio) {
		String sql = "update OA_PartnerOption set status=1, optionMoney=(money*"+ratio+") where id in("+matchPartnerIds+")";
		baseDao.excuteSql(sql);
	}
}
